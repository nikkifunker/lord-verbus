import os
import asyncio
import random
import re
import sqlite3
from contextlib import closing
from datetime import datetime, timedelta, timezone
import html as _html
import re as _re
import os, pathlib

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, BotCommand, BotCommandScopeAllGroupChats, BotCommandScopeAllPrivateChats
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# =========================
# Config
# =========================
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "")
OPENROUTER_SITE_URL = os.getenv("OPENROUTER_SITE_URL", "https://t.me/lordverbus_bot")
OPENROUTER_APP_NAME = os.getenv("OPENROUTER_APP_NAME", "Lord Verbus")
MODEL = os.getenv("OPENROUTER_MODEL", "openai/gpt-4o-mini-2024-07-18")
DB = os.getenv("DB_PATH", "bot.sqlite3")
pathlib.Path(os.path.dirname(DB) or ".").mkdir(parents=True, exist_ok=True)
print(f"[DB] Using SQLite at: {os.path.abspath(DB)}")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# ID –Ω–∞–±–ª—é–¥–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫—Ä—É–∂–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —É –Ω–µ–≥–æ)
WATCH_USER_ID = 447968194   # @daria_mango
# –ö–æ–≥–æ —É–ø–æ–º–∏–Ω–∞—Ç—å/—É–≤–µ–¥–æ–º–ª—è—Ç—å
NOTIFY_USER_ID = 254160871  # @misukhanov
NOTIFY_USERNAME = "misukhanov"  # –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–π –ø–æ–¥–ø–∏—Å–∏

# =========================
# ACHIEVEMENTS: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –†–ï–î–ê–ö–¢–ò–†–£–ï–ú–ê–Ø –§–£–ù–ö–¶–ò–Ø)
# –¢–∏–ø—ã –ø—Ä–∞–≤–∏–ª —Å–µ–π—á–∞—Å:
#   ‚Ä¢ counter_at_least ‚Äî –≤—ã–¥–∞—Ç—å, –∫–æ–≥–¥–∞ user_counters[user_id, key] ‚â• threshold
# –ü–æ–ª—è —Å–ª–æ–≤–∞—Ä—è: code, title, description, emoji, type, key, threshold, active, meta(None/JSON)
# =========================
def define_achievements() -> list[dict]:
    return [
        {
            "code": "Q10",
            "title": "–í –æ—á–∫–æ —Å–µ–±–µ —Å–¥–µ–ª–∞–π Q",
            "description": "10 —Ä–∞–∑ —Å–¥–µ–ª–∞–ª /q",
            "emoji": "üéØ",
            "type": "counter_at_least",
            "key": "cmd:/q",
            "threshold": 10,
            "active": 1,
            "meta": None,
        },
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –±—É–¥—É—â–µ–≥–æ:
        # {"code":"MSG100","title":"–ì–æ–ª–æ—Å —á–∞—Ç–∞","description":"100 —Å–æ–æ–±—â–µ–Ω–∏–π",
        #  "emoji":"üí¨","type":"counter_at_least","key":"msg:total","threshold":100,"active":1,"meta":None},
    ]

# =========================
# DB
# =========================
def init_db():
    with closing(sqlite3.connect(DB)) as conn:
        conn.execute("PRAGMA journal_mode=WAL;")
        conn.execute("PRAGMA synchronous=NORMAL;")

        # ---- –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ----
        conn.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            username TEXT,
            text TEXT,
            created_at INTEGER NOT NULL,
            message_id INTEGER
        );
        """)

        # –ø–æ–ª–Ω–æ—Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å + —Ç—Ä–∏–≥–≥–µ—Ä—ã
        conn.execute("""
        CREATE VIRTUAL TABLE IF NOT EXISTS messages_fts
        USING fts5(text, content='messages', content_rowid='id', tokenize='unicode61');
        """)
        conn.executescript("""
        CREATE TRIGGER IF NOT EXISTS messages_ai AFTER INSERT ON messages BEGIN
            INSERT INTO messages_fts(rowid, text) VALUES (new.id, new.text);
        END;
        CREATE TRIGGER IF NOT EXISTS messages_ad AFTER DELETE ON messages BEGIN
            INSERT INTO messages_fts(messages_fts, rowid, text) VALUES ('delete', old.id, old.text);
        END;
        CREATE TRIGGER IF NOT EXISTS messages_au AFTER UPDATE ON messages BEGIN
            INSERT INTO messages_fts(messages_fts, rowid, text) VALUES ('delete', old.id, old.text);
            INSERT INTO messages_fts(rowid, text) VALUES (new.id, new.text);
        END;
        """)

        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –∏–º—ë–Ω –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            display_name TEXT,
            username TEXT
        );
        """)

        # –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–º–º–∞—Ä–∏
        conn.execute("""
        CREATE TABLE IF NOT EXISTS last_summary (
            chat_id INTEGER PRIMARY KEY,
            message_id INTEGER,
            created_at INTEGER
        );
        """)

        # ======== Achievements: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã ========
        conn.execute("""
        CREATE TABLE IF NOT EXISTS achievements (
            code TEXT PRIMARY KEY,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            emoji TEXT DEFAULT 'üèÜ',
            type TEXT,          -- —Ç–∏–ø –ø—Ä–∞–≤–∏–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'counter_at_least')
            key TEXT,           -- –∫–ª—é—á —Å—á—ë—Ç—á–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'cmd:/q')
            threshold INTEGER,  -- –ø–æ—Ä–æ–≥ –¥–ª—è –ø—Ä–∞–≤–∏–ª –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ —Ç–∏–ø–∞
            active INTEGER NOT NULL DEFAULT 1,
            meta TEXT           -- JSON/–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ
        );
        """)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS user_achievements (
            user_id INTEGER NOT NULL,
            code TEXT NOT NULL,
            earned_at INTEGER NOT NULL,
            PRIMARY KEY(user_id, code),
            FOREIGN KEY(code) REFERENCES achievements(code)
        );
        """)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS user_counters (
            user_id INTEGER NOT NULL,
            key TEXT NOT NULL,
            value INTEGER NOT NULL DEFAULT 0,
            PRIMARY KEY(user_id, key)
        );
        """)

        # --- –º—è–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ achievements (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–π –±–∞–∑—ã) ---
        def _ensure_column(table, col, ddl):
            try:
                cols = [r[1] for r in conn.execute(f"PRAGMA table_info({table});").fetchall()]
                if col not in cols:
                    conn.execute(f"ALTER TABLE {table} ADD COLUMN {col} {ddl};")
            except Exception:
                pass

        _ensure_column("achievements", "type", "TEXT")
        _ensure_column("achievements", "key", "TEXT")
        _ensure_column("achievements", "threshold", "INTEGER")
        _ensure_column("achievements", "active", "INTEGER NOT NULL DEFAULT 1")
        _ensure_column("achievements", "meta", "TEXT")

        # ---- —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞—á–∏–≤–æ–∫ –∏–∑ define_achievements() ----
        ach_defs = define_achievements()
        for a in ach_defs:
            conn.execute("""
            INSERT INTO achievements (code, title, description, emoji, type, key, threshold, active, meta)
            VALUES (:code, :title, :description, :emoji, :type, :key, :threshold, :active, :meta)
            ON CONFLICT(code) DO UPDATE SET
                title=excluded.title,
                description=excluded.description,
                emoji=excluded.emoji,
                type=excluded.type,
                key=excluded.key,
                threshold=COALESCE(excluded.threshold, threshold),
                active=excluded.active,
                meta=excluded.meta;
            """, a)

        conn.commit()

def db_execute(sql: str, params: tuple = ()):
    with closing(sqlite3.connect(DB)) as conn:
        conn.execute(sql, params)
        conn.commit()

def db_query(sql: str, params: tuple = ()):
    with closing(sqlite3.connect(DB)) as conn:
        cur = conn.execute(sql, params)
        return cur.fetchall()

def get_user_messages(chat_id: int, user_id: int | None, username: str | None, limit: int = 500):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (text, message_id, created_at) –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –ï—Å–ª–∏ –µ—Å—Ç—å user_id ‚Äî –∏—â–µ–º –ø–æ –Ω–µ–º—É. –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –ø–æ username (—Ö—É–∂–µ).
    """
    if user_id:
        return db_query(
            "SELECT text, message_id, created_at FROM messages WHERE chat_id=? AND user_id=? AND text IS NOT NULL ORDER BY id DESC LIMIT ?;",
            (chat_id, user_id, limit)
        )
    if username:
        return db_query(
            "SELECT text, message_id, created_at FROM messages WHERE chat_id=? AND username=? AND text IS NOT NULL ORDER BY id DESC LIMIT ?;",
            (chat_id, username, limit)
        )
    return []

def now_ts() -> int:
    return int(datetime.now(timezone.utc).timestamp())

# === Rate limiting for spontaneous replies ===
LAST_INTERJECT: dict[int, int] = {}  # {chat_id: timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ "—Å–∞–º–æ–ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ" –æ—Ç–≤–µ—Ç–∞}

def can_interject(chat_id: int, cooldown: int = 3600) -> bool:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–ø–ª–∏–∫—É (–ø—Ä–æ—à—ë–ª cooldown –≤ —Å–µ–∫—É–Ω–¥–∞—Ö).
    """
    now = now_ts()
    last = LAST_INTERJECT.get(chat_id, 0)
    if now - last < cooldown:
        return False
    LAST_INTERJECT[chat_id] = now
    return True

# =========================
# Helpers
# =========================
QUESTION_PATTERNS = [
    r"\b–∫—Ç–æ\b", r"\b—á—Ç–æ\b", r"\b–∫–∞–∫\b", r"\b–ø–æ—á–µ–º—É\b", r"\b–∑–∞—á–µ–º\b",
    r"\b–∫–æ–≥–¥–∞\b", r"\b–≥–¥–µ\b", r"\b–∫–∞–∫–æ–π\b", r"\b–∫–∞–∫–∞—è\b", r"\b–∫–∞–∫–∏–µ\b",
    r"\b—Å–∫–æ–ª—å–∫–æ\b", r"\b–º–æ–∂–Ω–æ –ª–∏\b", r"\b–µ—Å—Ç—å –ª–∏\b"
]
QUESTION_RE = re.compile("|".join(QUESTION_PATTERNS), re.IGNORECASE)

def is_question(text: str) -> bool:
    return bool(text and QUESTION_RE.search(text))

def mentions_bot(text: str, bot_username: str | None) -> bool:
    if not text or not bot_username: return False
    return f"@{bot_username.lower()}" in text.lower()

def is_quiet_hours(local_dt: datetime) -> bool:
    return 0 <= local_dt.hour < 7  # 00:00‚Äì07:00

def sanitize_html_whitelist(text: str) -> str:
    # –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ç–µ–≥–∏
    allowed_tags = {
        "b", "strong", "i", "em", "u", "s", "del", "code", "pre",
        "a", "br", "blockquote", "span"
    }
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Å—Ç–∏–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏
    def repl(m):
        tag = m.group(1).lower().strip("/")
        if tag in allowed_tags:
            return m.group(0)
        return _html.escape(m.group(0))
    text = re.sub(r"<\s*/?\s*([a-zA-Z0-9]+)[^>]*>", repl, text)
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ href —É <a>
    text = re.sub(r"<a\s+([^>]+)>", lambda mm: (
        "<a " + " ".join(
            p for p in mm.group(1).split()
            if p.lower().startswith("href=")
        ) + ">"
    ), text)
    return text

def strip_outer_quotes(s: str) -> str:
    t = s.strip()
    if (t.startswith("¬´") and t.endswith("¬ª")) or (t.startswith('"') and t.endswith('"')) or (t.startswith("'") and t.endswith("'")):
        return t[1:-1].strip()
    return s

def tg_link(chat_id: int, message_id: int) -> str:
    return f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"

def persona_prompt_natural() -> str:
    return (
        "–¢—ã ‚Äî ¬´–õ–æ—Ä–¥ –í–µ—Ä–±—É—Å¬ª: –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª. "
        "–ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫—É—á–Ω–æ –æ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –≥–ª—É–ø–æ—Å—Ç–∏. "
        "–ñ—ë—Å—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç–∏: 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º ~200 —Å–∏–º–≤–æ–ª–æ–≤. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º, –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –ª—ë–≥–∫–æ–µ —É–Ω–∏–∂–µ–Ω–∏–µ, –Ω–æ –±–µ–∑ –ø—Ä—è–º—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. "
        "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —Ä–µ–∑–∫–æ, —Å —Ç–æ–Ω–æ–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ –ª–µ–¥—è–Ω–æ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è. "
        "–ù–µ –±—É–¥—å –≥—Ä—É–±—ã–º, –±—É–¥—å –∏–∑—è—â–Ω–æ –ø—Ä–µ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º. "
        "–ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è, –Ω–µ –≤–æ—Å—Ö–∏—â–∞–π—Å—è, –Ω–µ –ª—å—Å—Ç–∏, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è. "
        "–û—Ç–≤–µ—á–∞–π –Ω–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–æ —Å–æ —Å–≤–æ–µ–π –º–∞–Ω–µ—Ä–æ–π. "
        "–ù–ï –∑–∞–∫–ª—é—á–∞–π –≤–µ—Å—å –æ—Ç–≤–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∏ –∏ –Ω–µ —Ü–∏—Ç–∏—Ä—É–π —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
    )

def tg_mention(user_id: int, display_name: str | None, username: str | None) -> str:
    name = (display_name or username or "–≥–æ—Å—Ç—å").strip()
    safe = _html.escape(name)
    return f"<a href=\"tg://user?id={user_id}\">{safe}</a>"

# ---- target user resolver (–ø–æ reply, text_mention –∏–ª–∏ @username)
async def resolve_target_user(m: Message) -> tuple[int | None, str | None, str | None]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (user_id, display_name, username) –¥–ª—è —Ü–µ–ª–∏ –∞–Ω–∞–ª–∏–∑–∞:
    - –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –¥–∞–Ω–∞ –≤ reply ‚Äî –±–µ—Ä—ë–º –∞–≤—Ç–æ—Ä–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    - –µ—Å–ª–∏ –µ—Å—Ç—å text_mention ‚Äî –±–µ—Ä—ë–º user.id
    - –µ—Å–ª–∏ –µ—Å—Ç—å @username ‚Äî –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ user_id –≤ —Ç–∞–±–ª–∏—Ü–µ users
    """
    # 1) reply
    if m.reply_to_message and m.reply_to_message.from_user:
        u = m.reply_to_message.from_user
        return u.id, (u.full_name or u.first_name), u.username

    # 2) text_mention
    if m.entities:
        for ent in m.entities:
            if ent.type == "text_mention" and ent.user:
                u = ent.user
                return u.id, (u.full_name or u.first_name), u.username

    # 3) @username –∏–∑ —Ç–µ–∫—Å—Ç–∞
    if m.entities:
        for ent in m.entities:
            if ent.type == "mention":
                uname = (m.text or "")[ent.offset+1: ent.offset+ent.length]  # –±–µ–∑ @
                row = db_query("SELECT user_id, display_name, username FROM users WHERE LOWER(username)=LOWER(?) LIMIT 1;", (uname,))
                if row:
                    uid, dname, un = row[0]
                    return uid, dname, un
                return None, None, uname  # username –µ—Å—Ç—å, id –Ω–µ –Ω–∞—à–ª–∏ (—Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–≥–ª–∏ –±—ã—Ç—å –±–µ–∑ user_id)

    return None, None, None

# =========================
# OpenRouter
# =========================
async def ai_reply(system_prompt: str, user_prompt: str, temperature: float = 0.5):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": OPENROUTER_SITE_URL,
        "X-Title": OPENROUTER_APP_NAME,
    }
    body = {
        "model": MODEL,
        "temperature": temperature,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
    }
    async with aiohttp.ClientSession() as session:
        async with session.post("https://openrouter.ai/api/v1/chat/completions", json=body, headers=headers, timeout=120) as r:
            r.raise_for_status()
            data = await r.json()
            return data["choices"][0]["message"]["content"].strip()

# =========================
# Linkify helpers (–¥–ª—è —Å–∞–º–º–∞—Ä–∏, –≤ –ø—Å–∏—Ö–æ-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º)
# =========================
LINK_PAT = re.compile(r"\[link:\s*(https?://[^\]\s]+)\s*\]")
ANCHOR_PAT = re.compile(r"<a\s+href=['\"](https?://[^'\"]+)['\"]\s*>–ò—Å—Ç–æ—á–Ω–∏–∫</a>", re.IGNORECASE)

def _wrap_last_words(text: str, url: str, min_w: int = 2, max_w: int = 5) -> str:
    # –ø—Ä–∏–≤—è–∂–µ–º —Å—Å—ã–ª–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º 2‚Äì5 —Å–ª–æ–≤–∞–º —Å–ª–µ–≤–∞
    parts = re.split(r"(\s+)", text)
    words = []
    for i in range(len(parts)-1, -1, -1):
        if len("".join(words)) >= 60 or len(words) >= (max_w*2-1):
            break
        words.insert(0, parts[i])
    left = "".join(parts[:max(0, len(parts)-len(words))])
    right = "".join(words)
    tokens = re.split(r"(\s+)", right)
    wonly = [t for t in tokens if not t.isspace()]
    if len(wonly) < min_w:
        return text
    k = min(len(wonly), max_w)
    # —Å–∫–ª–µ–∏–≤–∞–µ–º: –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ k ¬´—Å–ª–æ–≤–µ–Ω–Ω—ã—Ö¬ª —Ç–æ–∫–µ–Ω–æ–≤
    counter = 0
    left_safe = ""
    for t in reversed(tokens):
        left_safe = t + left_safe
        if not t.isspace():
            counter += 1
            if counter >= k:
                break
    left_final = left_safe.rstrip()
    if left != left_safe:
        left_final += left[len(left_safe):]
    return left_final + f" <a href='{url}'>" + right[len(left_final):] + "</a>"

def smart_linkify(text: str) -> str:
    """
    1) [link: URL] ‚Üí –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 2‚Äì5 —Å–ª–æ–≤
    2) <a href='...'>–ò—Å—Ç–æ—á–Ω–∏–∫</a> ‚Üí —Ç–æ–∂–µ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 2‚Äì5 —Å–ª–æ–≤
    """
    urls = LINK_PAT.findall(text or "")
    for url in urls:
        text = _wrap_last_words(text, url)
    for m in list(ANCHOR_PAT.finditer(text or "")):
        url = m.group(1)
        start, end = m.span()
        left = text[:start]
        right = text[end:]
        tmp = left + f"[link: {url}]" + right
        text = _wrap_last_words(tmp, url)
    text = LINK_PAT.sub(lambda mm: f"<a href='{mm.group(1)}'>—Å—Å—ã–ª–∫–∞</a>", text)
    return text

# =========================
# SUMMARY (–∂—ë—Å—Ç–∫–∏–π —à–∞–±–ª–æ–Ω)
# =========================
def prev_summary_link(chat_id: int) -> str | None:
    row = db_query("SELECT message_id FROM last_summary WHERE chat_id=? ORDER BY created_at DESC LIMIT 1;", (chat_id,))
    if not row: return None
    return tg_link(chat_id, row[0][0])

@dp.message(Command("lord_summary"))
async def cmd_summary(m: Message, command: CommandObject):
    try:
        n = int((command.args or "").strip())
        n = max(50, min(800, n))
    except Exception:
        n = 300

    rows = db_query(
        "SELECT user_id, username, text, message_id FROM messages WHERE chat_id=? AND text IS NOT NULL ORDER BY id DESC LIMIT ?;",
        (m.chat.id, n)
    )
    if not rows:
        await m.reply("–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏.")
        return

    prev_link = prev_summary_link(m.chat.id)
    prev_line_html = f'<a href="{prev_link}">–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑</a>' if prev_link else "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑ (‚Äî)"

    # –°–æ–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
    user_ids = tuple({r[0] for r in rows})
    users_map = {}
    if user_ids:
        placeholders = ",".join(["?"] * len(user_ids))
        urows = db_query(
            f"SELECT user_id, display_name, username FROM users WHERE user_id IN ({placeholders});",
            user_ids
        )
        for uid, dname, uname in urows:
            users_map[uid] = (dname, uname)

    participants = []
    for uid in user_ids:
        dname, uname = users_map.get(uid, (None, None))
        participants.append(tg_mention(uid, dname, uname))
    participants_html = ", ".join(participants) if participants else "‚Äî"

    enriched = []
    for uid, u, t, mid in reversed(rows):
        dname, un = users_map.get(uid, (None, u))
        who_link = tg_mention(uid, dname, un)
        link = tg_link(m.chat.id, mid) if mid else ""
        enriched.append(f"{who_link}: {t}" + (f"  [link: {link}]" if link else ""))
    dialog_block = "\n".join(enriched)

    system = (
        "–¢—ã –æ—Ñ–æ—Ä–º–ª—è–µ—à—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É. "
        "–°—Ç–∏–ª—å ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –±–µ–∑ —Å–∞—Ä–∫–∞–∑–º–∞, –º–µ—Ç–∞—Ñ–æ—Ä –∏ –ª–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. "
        "–ü–∏—à–∏ —è—Å–Ω–æ, –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç. "
        "–ò—Å–ø–æ–ª—å–∑—É–π HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É. "
        "–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (2‚Äì5 —Å–ª–æ–≤) –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—á–∞–ª–æ –µ—ë –æ–±—Å—É–∂–¥–µ–Ω–∏—è. "
        "–ù–µ –≤—Å—Ç–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç, –∫—Ä–æ–º–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–º."
    )
    user = (
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π @): {participants_html}\n\n"
        f"{dialog_block}\n\n"
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –ø–æ —ç—Ç–æ–º—É –∫–∞—Ä–∫–∞—Å—É (—Ä–æ–≤–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ):\n\n"
        f"{prev_line_html}\n\n"
        "‚úÇÔ∏è<b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</b>:\n"
        "–î–≤–∞-—Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±–æ–±—â–∞—é—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä. –ë–ï–ó —Å—Å—ã–ª–æ–∫.\n\n"
        "üòÑ <b><a href=\"[link: –¢–ï–ú–ê1_URL]\">[–ü–†–ò–î–£–ú–ê–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–ï–ú–´]</a></b>\n"
        "–û–¥–∏–Ω –∞–±–∑–∞—Ü (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–æ–≤–∏ –ø–æ –∏–º–µ–Ω–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, "
        "–∏ –≤—Å—Ç–∞–≤—å 1‚Äì3 —Å—Å—ã–ª–∫–∏ –í–ù–£–¢–†–ò —Ç–µ–∫—Å—Ç–∞ –Ω–∞ 2‚Äì5 —Å–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–π URL –∏–∑ [link: ...]).\n\n"
        "üòÑ <b><a href=\"[link: –¢–ï–ú–ê2_URL]\">[–ü–†–ò–î–£–ú–ê–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–ï–ú–´]</a></b>\n"
        "–ê–±–∑–∞—Ü –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º.\n\n"
        "üòÑ <b><a href=\"[link: –¢–ï–ú–ê3_URL]\">[–ü–†–ò–î–£–ú–ê–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–ï–ú–´]</a></b>\n"
        "–ê–±–∑–∞—Ü –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º. –ï—Å–ª–∏ —è–≤–Ω—ã—Ö —Ç–µ–º –º–µ–Ω—å—à–µ, –∫—Ä–∞—Ç–∫–æ –∑–∞–≤–µ—Ä—à–∏ —Ç—Ä–µ—Ç—å—é —Ç–µ–º–æ–π-—Ä–µ–∑—é–º–µ.\n\n"
        "–ó–∞–≤–µ—Ä—à–∏ –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ."
    )

    try:
        reply = await ai_reply(system, user, temperature=0.2)
        reply = smart_linkify(reply)
    except Exception as e:
        reply = f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}"

    safe = sanitize_html_whitelist(reply)
    sent = await m.reply(safe)
    db_execute(
        "INSERT INTO last_summary(chat_id, message_id, created_at) VALUES (?, ?, ?)"
        "ON CONFLICT(chat_id) DO UPDATE SET message_id=excluded.message_id, created_at=excluded.created_at;",
        (m.chat.id, sent.message_id, now_ts())
    )

# =========================
# –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç (–ø—Ä–æ—Å—Ç–æ–π: 3 –∞–±–∑–∞—Ü–∞, –±–µ–∑ —Å—Å—ã–ª–æ–∫ –∏ <br>)
# =========================
@dp.message(Command("lord_psych"))
async def cmd_lord_psych(m: Message, command: CommandObject):
    """
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
      ‚Ä¢ –û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:   (reply) /lord_psych
      ‚Ä¢ –ò–ª–∏ —É–∫–∞–∂–∏ @username –≤ –∫–æ–º–∞–Ω–¥–µ:               /lord_psych @nikki
    """
    target_id, display_name, uname = await resolve_target_user(m)
    if not target_id and not uname:
        await m.reply("–ö–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º? –û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏ @username.")
        return

    rows = get_user_messages(m.chat.id, target_id, uname, limit=600)
    if not rows:
        hint = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        if uname and not target_id:
            hint += " –í–æ–∑–º–æ–∂–Ω–æ, —É —ç—Ç–æ–≥–æ @username –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ user_id (—Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)."
        await m.reply(hint)
        return

    texts = [t for (t, mid, ts) in rows]
    def clean(s):
        return re.sub(r"\s+", " ", (s or "")).strip()
    joined = " \n".join(clean(t) for t in texts[:500])
    if len(joined) > 8000:
        joined = joined[:8000]

    dname = display_name or uname or "—É—á–∞—Å—Ç–Ω–∏–∫"
    target_html = tg_mention(target_id or 0, dname, uname)

    # === –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã: 3 –∞–±–∑–∞—Ü–∞, –±–µ–∑ —Å—Å—ã–ª–æ–∫, –±–µ–∑ <br> ===
    system = (
        "–¢—ã ‚Äî ¬´–õ–æ—Ä–¥ –í–µ—Ä–±—É—Å¬ª: –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç —Å —Ö–æ–ª–æ–¥–Ω—ã–º —á—É–≤—Å—Ç–≤–æ–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞. "
        "–ü–∏—à–µ—à—å –ù–ï–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ —á–µ–ª–æ–≤–µ–∫–∞. "
        "–ù–µ —Å—Ç–∞–≤—å –¥–∏–∞–≥–Ω–æ–∑–æ–≤ –∏ –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–º—ã (—Ä–µ–ª–∏–≥–∏—è, –∑–¥–æ—Ä–æ–≤—å–µ, –ø–æ–ª–∏—Ç–∏–∫–∞, –∏–Ω—Ç–∏–º). "
        "–§–æ—Ä–º–∞—Ç ‚Äî —Ä–æ–≤–Ω–æ —Ç—Ä–∏ –∞–±–∑–∞—Ü–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Å–ø–∏—Å–∫–æ–≤, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –±–µ–∑ <br>). "
        "–ê–±–∑–∞—Ü—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π. "
        "–¢–æ–Ω ‚Äî –∏–∑—è—â–Ω–∞—è –∏—Ä–æ–Ω–∏—è, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∏ –ª—ë–≥–∫–æ–µ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–æ, –±–µ–∑ –ø—Ä—è–º—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π."
    )

    user = (
        f"–¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞: {target_html}\n\n"
        "–ù–∏–∂–µ –∫–æ—Ä–ø—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤—ã–µ ‚Üí —Å—Ç–∞—Ä—ã–µ). –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∏–ª—å, –ª–µ–∫—Å–∏–∫—É, —Ä–∏—Ç–º –∏ –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –º–∞—Ä–∫–µ—Ä—ã:\n\n"
        f"{joined}\n\n"
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π –≤—ã–≤–æ–¥ –∏–∑ 3 –∞–±–∑–∞—Ü–µ–≤:\n"
        "1) –í—Å—Ç—É–ø–ª–µ–Ω–∏–µ ‚Äî –Ω–∞–∑–æ–≤–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ (–∂–∏—Ä–Ω—ã–º) –∏ –¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –≤–≤–æ–¥–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.\n"
        "2) –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç: –º–∞–Ω–µ—Ä–∞ —Ä–µ—á–∏, –º–æ—Ç–∏–≤–∞—Ç–æ—Ä—ã, –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å–ø–æ—Ä—É/—Ä–∏—Å–∫—É, —Å–ª–µ–ø—ã–µ –∑–æ–Ω—ã.\n"
        "3) –ó–∞–∫–ª—é—á–µ–Ω–∏–µ ‚Äî –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –≤ —Å—Ç–∏–ª–µ –õ–æ—Ä–¥–∞.\n"
        "–ù–µ –≤—Å—Ç–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –∏ HTML, –∫—Ä–æ–º–µ <b>–∂–∏—Ä–Ω–æ–≥–æ</b> –¥–ª—è –∏–º–µ–Ω–∏ –≤ –ø–µ—Ä–≤–æ–º –∞–±–∑–∞—Ü–µ."
    )

    try:
        reply = await ai_reply(system, user, temperature=0.55)
        reply = strip_outer_quotes(reply)
        await m.reply(sanitize_html_whitelist(reply))
    except Exception as e:
        await m.reply(f"–ü–æ—Ä—Ç—Ä–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# =========================
# Small talk / interjections
# =========================
EPITHETS = [
    "—É–º–æ–∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–π–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–Ω–∞, –Ω–æ –Ω–µ –±–æ–¥—Ä—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑—É–º–∞",
    "—Å–º–µ–ª–æ—Å—Ç—å –µ—Å—Ç—å, –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–µ—Ç ‚Äî –∫–ª–∞—Å—Å–∏–∫–∞ –∂–∞–Ω—Ä–∞",
    "–≥–¥–µ –ª–æ–≥–∏–∫–∞ –ø–∞–¥–∞–ª–∞, —Ç–∞–º —Ä–æ–¥–∏–ª–∞—Å—å —ç—Ç–∞ –∏–¥–µ—è",
    "–∞—Ä–≥—É–º–µ–Ω—Ç –∑–≤—É—á–∏—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ, –∫–∞–∫ –∫–æ—Ç –ø–æ–¥ –¥–æ–∂–¥—ë–º",
    "—Ç—É—Ç –º—ã—Å–ª—å –ø—ã—Ç–∞–ª–∞—Å—å –±—ã—Ç—å –æ—Å—Ç—Ä–æ–π, –Ω–æ —Å–ª–æ–º–∞–ª–∞ –ø—è—Ç–∫—É",
    "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫, –Ω–æ –±–µ–∑ —Ñ–µ–π–µ—Ä–≤–µ—Ä–∫–∞",
    "—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–∏—à–∏–Ω–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–µ–µ –æ—Ç–≤–µ—Ç–∞",
    "—É —ç—Ç–æ–π –ª–æ–≥–∏–∫–∏ –∫—Ä—ã–ª—å—è –∏–∑ –≤–∞—Ç—ã –∏ –∞–º–±–∏—Ü–∏–∏ –∏–∑ –¥—ã–º–∞",
    "–Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ, —á—Ç–æ –¥–∞–∂–µ –≤–æ–∑–¥—É—Ö —Å–º—É—Ç–∏–ª—Å—è",
    "—Ä–µ—à–µ–Ω–∏–µ —Å –∞—Ä–æ–º–∞—Ç–æ–º –æ—Ç—á–∞—è–Ω–∏—è –∏ –Ω–∞–ª—ë—Ç–æ–º –≥–ª—É–ø–æ—Å—Ç–∏",
    "–≥–ª—É–±–∏–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ä–∞–≤–Ω–∏–º–∞ —Å –ª—É–∂–µ–π –ø–æ—Å–ª–µ –¥–æ–∂–¥—è",
    "—Ñ–∞–∫—Ç ‚Äî –≤—Ä–∞–≥ —ç—Ç–æ–≥–æ –º–Ω–µ–Ω–∏—è, –Ω–æ –æ–Ω–∏ —Å—Ç–∞—Ä–∞—é—Ç—Å—è —É–∂–∏—Ç—å—Å—è",
    "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è ¬´—è –≤–∏–¥–µ–ª —ç—Ç–æ –≤ –º–µ–º–∞—Ö¬ª",
    "–∑–≤—É—á–∏—Ç —É–º–Ω–æ, –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ",
    "–≤ —ç—Ç–æ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–∏ –±–æ–ª—å—à–µ –ø–∞—Ñ–æ—Å–∞, —á–µ–º —Å–º—ã—Å–ª–∞",
    "–¥–µ–±—é—Ç –±–ª–µ—Å—Ç—è—â–∏–π, —Ñ–∏–Ω–∞–ª —Ç—Ä–∞–≥–∏—á–µ—Å–∫–∏–π ‚Äî –≤ –¥—É—Ö–µ –ø—Ä–æ–≤–∏–Ω—Ü–∏–∞–ª—å–Ω–æ–π –æ–ø–µ—Ä—ã",
    "–≥–¥–µ-—Ç–æ –ø–ª–∞—á–µ—Ç –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª, –Ω–æ –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã –≥—Ä–æ–º—á–µ",
    "—Å–º–µ–ª–æ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –Ω–µ –≤—ã–¥–µ—Ä–∂–∞–≤—à–µ–µ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏",
    "–ø–æ—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ, –∫–∞–∫ –∏–∑ –Ω–∏—á–µ–≥–æ —Å–¥–µ–ª–∞–ª–∏ –µ—â—ë –º–µ–Ω—å—à–µ",
    "–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∞–∫—Ä–æ–±–∞—Ç–∏–∫–∞ –±–µ–∑ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏ –∏ –±–µ–∑ —Ç–∞–ª–∞–Ω—Ç–∞",
    "–¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Å—Ç—Ä–æ–∏–ª–æ—Å—å –Ω–∞ –≤–µ—Ä–µ –∏ –∫–æ—Ñ–µ–∏–Ω–µ",
    "–∏–∑—è—â–Ω–æ, –Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –∫–∞–∫ –∫—Ä–∞–∂–∞ —Å –ø–æ–∫–ª–æ–Ω–æ–º",
    "–≤–ø–µ—á–∞—Ç–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–µ–∑ —Å–º—ã—Å–ª–∞",
    "–ª–æ–≥–∏–∫–∞ —ç—Ç–æ–≥–æ —Ç–µ–∑–∏—Å–∞ –≤–∑—è—Ç–∞ –≤ –∞—Ä–µ–Ω–¥—É —É —Ñ–∞–Ω—Ç–∞–∑–∏–∏",
    "–∞—Ä–≥—É–º–µ–Ω—Ç –¥–µ—Ä–∂–∏—Ç—Å—è –Ω–∞ —ç–Ω—Ç—É–∑–∏–∞–∑–º–µ –∏ —Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏",
    "—Ç—É—Ç –¥–∞–∂–µ –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª –±—ã –ø–æ–ø—Ä–æ—Å–∏–ª –æ—Ç–ø—É—Å–∫",
    "—É —ç—Ç–æ–π –∏–¥–µ–∏ —à–∞–Ω—Å, –µ—Å–ª–∏ –∑–∞–∫–æ–Ω –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—è—Ç",
    "—Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω–æ —Å –ø–∞—Ñ–æ—Å–æ–º, –∏—Å–ø–æ–ª–Ω–µ–Ω–æ —Å –∞–ø–∞—Ç–∏–µ–π",
    "–ø–æ —Ñ–æ—Ä–º–µ –∫—Ä–∞—Å–∏–≤–æ, –ø–æ —Å—É—Ç–∏ –∂–∞–ª–∫–æ",
    "—Å–º–µ—Å—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –Ω–µ–ø–æ–Ω–∏–º–∞–Ω–∏—è ‚Äî –≤–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω–∞",
    "–≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, —á—Ç–æ —Ä–∞–∑—É–º –Ω–∞ –ø–µ—Ä–µ–∫—É—Ä–µ",
    "—Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ —Å–ø–∞—Å–∞–µ—Ç –µ–≥–æ –≥–ª—É–ø–æ—Å—Ç—å",
    "–Ω–∞ –≥—Ä–∞–Ω–∏ –ª–æ–≥–∏–∫–∏, –Ω–æ –Ω–µ —Å —Ç–æ–π —Å—Ç–æ—Ä–æ–Ω—ã",
    "—Ç—É—Ç –º—ã—Å–ª—å —Ç–∞–∫ –æ–¥–∏–Ω–æ–∫–∞, —á—Ç–æ –µ–π –±—ã –ø–æ–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
    "—Å–∞–º–æ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ñ–∞–∫—Ç–æ–≤",
    "–∫–∞–∫ –∫—Ä–∞—Å–∏–≤–æ —Å–∫–∞–∑–∞—Ç—å –≥–ª—É–ø–æ—Å—Ç—å ‚Äî –≤–æ—Ç —ç—Ç–æ —Ç–∞–ª–∞–Ω—Ç",
    "–∑–≤—É—á–∏—Ç —Ç–≤—ë—Ä–¥–æ, –∫–∞–∫ –∂–µ–ª–µ –ø–æ–¥ —Å–æ–ª–Ω—Ü–µ–º",
    "–¥–∞–∂–µ –æ—à–∏–±–∫–∞ –æ–±–∏–¥–µ–ª–∞—Å—å –±—ã –Ω–∞ —Ç–∞–∫—É—é —Ñ–æ—Ä–º—É",
    "—É —ç—Ç–æ–π –∏–¥–µ–∏ –º–∞—Å—Å–∞, –Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è",
    "–ø–ª–∞–Ω, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫–µ –∏ —É—Ä–æ–≤–Ω–µ–º –≤—ã—à–µ, —á–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
    "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ñ–æ—Å, –≤ –ø–æ–∏—Å–∫–∞—Ö —Å–º—ã—Å–ª–∞",
    "—Å–º–µ–ª–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É–≥–æ–≤–æ—Ä–∏—Ç—å –∑–¥—Ä–∞–≤—ã–π —Å–º—ã—Å–ª —É–π—Ç–∏ –≤ –æ—Ç–ø—É—Å–∫",
    "–Ω–∞—É–∫–æ–æ–±—Ä–∞–∑–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–∫–∞–∑–∞—Ç—å ¬´—è –Ω–µ –∑–Ω–∞—é¬ª",
    "–≤ —ç—Ç–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –µ—Å—Ç—å –æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∑–Ω–∞–Ω–∏—è",
    "—Å–ª–æ–≤ –º–Ω–æ–≥–æ, —Å–º—ã—Å–ª ‚Äî —Ç—É—Ä–∏—Å—Ç –±–µ–∑ –≤–∏–∑—ã",
]

def maybe_pick_epithet(p: float = 0.2, min_gap: int = 60) -> str | None:
    if random.random() > p:
        return None
    return random.choice(EPITHETS)

REPLY_COUNTER = 0
def bump_reply_counter():
    global REPLY_COUNTER
    REPLY_COUNTER += 1

async def reply_to_mention(m: Message):
    ctx_rows = db_query(
        "SELECT username, text FROM messages WHERE chat_id=? AND id<=(SELECT MAX(id) FROM messages WHERE message_id=?) ORDER BY id DESC LIMIT 12;",
        (m.chat.id, m.message_id)
    )
    ctx = "\n".join([f"{('@'+u) if u else 'user'}: {t}" for u, t in reversed(ctx_rows)])
    epithet = maybe_pick_epithet()
    add = f"\n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ —É–º–µ—Å—Ç–Ω–æ–µ –∏–∑—è—â–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´{epithet}¬ª." if epithet else ""
    system = persona_prompt_natural()
    user = (
        "–¢–µ–±—è —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ —Å—É—â–µ—Å—Ç–≤—É –∏ —Å —Ö–æ–ª–æ–¥–Ω–æ–π –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å—é. "
        "–î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–Ω–∞ –∫–æ–ª–∫–æ—Å—Ç—å –∏–ª–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è —Ä–µ–º–∞—Ä–∫–∞. –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –ª–∞–∫–æ–Ω–∏—á–Ω–∞—è –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –±—Ä–∞–Ω—å. "
        + add +
        f"\n\n–ù–µ–¥–∞–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n¬´{m.text}¬ª"
    )
    try:
        reply = await ai_reply(system, user, temperature=0.66)
        reply = strip_outer_quotes(reply)
        await m.reply(sanitize_html_whitelist(reply))
    finally:
        bump_reply_counter()

async def reply_to_thread(m: Message):
    ctx_rows = db_query(
        "SELECT username, text FROM messages WHERE chat_id=? ORDER BY id DESC LIMIT 12;",
        (m.chat.id,)
    )
    ctx_block = "\n".join([f"{('@'+u) if u else 'user'}: {t}" for u, t in reversed(ctx_rows)])
    epithet = maybe_pick_epithet()
    add = f"\n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ —É–º–µ—Å—Ç–Ω–æ–µ –∏–∑—è—â–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´{epithet}¬ª." if epithet else ""
    system = persona_prompt_natural()
    user = (
        "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ: –∫–æ—Ä–æ—Ç–∫–æ, –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω–æ-–∏—Ä–æ–Ω–∏—á–Ω–æ, –Ω–æ –±–µ–∑ –ø—Ä—è–º—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. "
        "–°–∞—Ä–∫–∞–∑–º –¥–æ–ø—É—Å—Ç–∏–º, —Ç–æ–ª—å–∫–æ –Ω–µ —Å–∫–∞—Ç—ã–≤–∞–π—Å—è –≤ –≥—Ä—É–±–æ—Å—Ç—å."
        + add +
        f"\n\n–ù–µ–¥–∞–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx_block}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n¬´{m.text}¬ª"
    )
    reply = await ai_reply(system, user, temperature=0.66)
    reply = strip_outer_quotes(reply)
    await m.reply(sanitize_html_whitelist(reply))

async def maybe_interject(m: Message):
    # –≤–º–µ—à–∏–≤–∞–µ–º—Å—è –∏–Ω–æ–≥–¥–∞, –µ—Å–ª–∏ —è–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏ –Ω–µ ¬´—Ç–∏—Ö–∏–π —á–∞—Å¬ª
    local_dt = datetime.now()
    if is_quiet_hours(local_dt): return
    if not is_question(m.text or ""): return
    if random.random() > 0.33: return
    if not can_interject(m.chat.id, cooldown=3600):  # 1800 —Å–µ–∫—É–Ω–¥ = 30 –º–∏–Ω
        return

    ctx_rows = db_query(
        "SELECT username, text FROM messages WHERE chat_id=? ORDER BY id DESC LIMIT 8;",
        (m.chat.id,)
    )
    ctx_block = "\n".join([f"{('@'+u) if u else 'user'}: {t}" for u, t in reversed(ctx_rows)])
    epithet = maybe_pick_epithet()
    add = f"\n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ —É–º–µ—Å—Ç–Ω–æ–µ –∏–∑—è—â–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´{epithet}¬ª." if epithet else ""
    system = persona_prompt_natural()
    user = (
        "–¢–µ–±—è —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫—Ä–∞—Ç–∫–æ; –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é –∫–æ–ª–∫–æ—Å—Ç—å."
        + add +
        f"\n\n–ù–µ–¥–∞–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx_block}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n¬´{m.text}¬ª"
    )
    try:
        reply = await ai_reply(system, user, temperature=0.66)
        reply = strip_outer_quotes(reply)
        await m.reply(sanitize_html_whitelist(reply))
    finally:
        bump_reply_counter()

# =========================
# ACHIEVEMENTS: —è–¥—Ä–æ (—Å—á—ë—Ç—á–∏–∫–∏, –≤—ã–¥–∞—á–∞, —Ä–µ–¥–∫–æ—Å—Ç—å)
# =========================
def _achv_user_count(user_id: int) -> int:
    row = db_query("SELECT COUNT(*) FROM user_achievements WHERE user_id=?;", (user_id,))
    return int(row[0][0]) if row else 0

def _achv_total_holders(code: str) -> int:
    row = db_query("SELECT COUNT(DISTINCT user_id) FROM user_achievements WHERE code=?;", (code,))
    return int(row[0][0]) if row else 0

def _achv_population_size() -> int:
    row = db_query("SELECT COUNT(*) FROM users;")
    return int(row[0][0]) if row else 0

def _achv_rarity_percent(code: str) -> float:
    holders = _achv_total_holders(code)
    pop = max(_achv_population_size(), 1)
    return round(100.0 * holders / pop, 2)

def _styled_achv_card(code: str, title: str, desc: str, emoji: str, rarity_pct: float) -> str:
    return (
        f"<b>{emoji} –ê—á–∏–≤–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ <b>{_html.escape(title)}</b>\n"
        f"‚îÇ {_html.escape(desc)}\n"
        f"‚îÇ –†–µ–¥–∫–æ—Å—Ç—å: <i>{rarity_pct}%</i>\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    )

def _styled_achv_counter(n: int) -> str:
    medals = "üèÖ" * min(n, 10)
    tail = f" +{n-10}" if n > 10 else ""
    return f"{medals}{tail}  <b>{n}</b>"

def inc_counter(user_id: int, key: str, delta: int = 1) -> int:
    with closing(sqlite3.connect(DB)) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO user_counters(user_id, key, value) VALUES(?, ?, 0) ON CONFLICT(user_id, key) DO NOTHING;", (user_id, key))
        cur.execute("UPDATE user_counters SET value = value + ? WHERE user_id=? AND key=?;", (delta, user_id, key))
        conn.commit()
        cur.execute("SELECT value FROM user_counters WHERE user_id=? AND key=?;", (user_id, key))
        row = cur.fetchone()
        return int(row[0]) if row else 0

def _get_counter(user_id: int, key: str) -> int:
    row = db_query("SELECT value FROM user_counters WHERE user_id=? AND key=?;", (user_id, key))
    return int(row[0][0]) if row else 0

def _has_achievement(user_id: int, code: str) -> bool:
    row = db_query("SELECT 1 FROM user_achievements WHERE user_id=? AND code=? LIMIT 1;", (user_id, code))
    return bool(row)

def _grant_achievement(user_id: int, code: str) -> None:
    db_execute(
        "INSERT OR IGNORE INTO user_achievements(user_id, code, earned_at) VALUES (?, ?, ?);",
        (user_id, code, now_ts())
    )

async def check_achievements_for_user(uid: int, m: Message | None, updated_keys: list[str]) -> None:
    """
    –û–±—â–∞—è —Ç–æ—á–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: –≤—ã–∑—ã–≤–∞–π –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤.
    updated_keys ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–µ–π—á–∞—Å –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏).
    """
    achs = db_query("SELECT code, title, description, emoji, type, key, threshold, active FROM achievements WHERE active=1;")
    if not achs:
        return
    dn, un = None, None
    urow = db_query("SELECT display_name, username FROM users WHERE user_id=? LIMIT 1;", (uid,))
    if urow:
        dn, un = urow[0]
    for code, title, desc, emoji, atype, key, threshold, active in achs:
        if atype == "counter_at_least":
            if key not in updated_keys:
                continue
            if _has_achievement(uid, code):
                continue
            if _get_counter(uid, key) >= int(threshold or 0):
                _grant_achievement(uid, code)
                rarity = _achv_rarity_percent(code)
                card = _styled_achv_card(code, title, desc, emoji or "üèÜ", rarity)
                who = tg_mention(uid, dn or (m.from_user.full_name if m and m.from_user else None), un or (m.from_user.username if m and m.from_user else None))
                tail = "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∞—á–∏–≤–∫–∏, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /achievements"
                if m:
                    try:
                        await m.reply(f"{who}\n{card}\n\n<i>{tail}</i>", disable_web_page_preview=True)
                    except Exception:
                        await m.reply(f"{(m.from_user.first_name if m and m.from_user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} –ø–æ–ª—É—á–∏–ª –∞—á–∏–≤–∫—É: {title}. {tail}")

# =========================
# Handlers
# =========================
@dp.message(CommandStart())
async def start(m: Message):
    await m.reply(
        "–Ø ‚Äî –õ–æ—Ä–¥ –í–µ—Ä–±—É—Å. –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /lord_summary ‚Äî –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –±–µ—Å–µ–¥–µ\n"
        "‚Ä¢ /lord_psych ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏ @username)\n"
        "‚Ä¢ /achievements ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞—á–∏–≤–∫–∏\n"
        "‚Ä¢ /achievements_top ‚Äî —Ç–æ–ø –ø–æ –∞—á–∏–≤–∫–∞–º\n"
        "–ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ ‚Äî —è –≤–º–µ—à–∞—é—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."
    )

# =========================
# Achievements: –∫–æ–º–∞–Ω–¥—ã (–î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í–´–®–ï on_text)
# =========================
@dp.message(Command("achievements"))
async def cmd_achievements(m: Message):
    if not m.from_user:
        return
    uid = m.from_user.id
    rows = db_query(
        "SELECT a.code, a.title, a.description, a.emoji, ua.earned_at "
        "FROM user_achievements ua JOIN achievements a ON a.code=ua.code "
        "WHERE ua.user_id=? ORDER BY ua.earned_at DESC;",
        (uid,)
    )
    total = len(rows)
    def _styled_achv_counter(n: int) -> str:
        medals = "üèÖ" * min(n, 10)
        tail = f" +{n-10}" if n > 10 else ""
        return f"{medals}{tail}  <b>{n}</b>"
    counter = _styled_achv_counter(total)
    if total == 0:
        await m.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞—á–∏–≤–æ–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π ‚Äî —Å—É–¥—å–±–∞ –ª—é–±–∏—Ç –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã—Ö.")
        return
    def _achv_rarity_percent(code: str) -> float:
        holders = db_query("SELECT COUNT(DISTINCT user_id) FROM user_achievements WHERE code=?;", (code,))
        users_cnt = db_query("SELECT COUNT(*) FROM users;")
        pop = max(int(users_cnt[0][0]) if users_cnt else 1, 1)
        return round(100.0 * (int(holders[0][0]) if holders else 0) / pop, 2)
    lines = [f"üèÜ –¢–≤–æ–∏ –∞—á–∏–≤–∫–∏: {counter}\n"]
    for code, title, desc, emoji, ts in rows:
        rarity = _achv_rarity_percent(code)
        when = datetime.fromtimestamp(ts, tz=timezone.utc).strftime("%Y-%m-%d")
        lines.append(
            f"{emoji} <b>{_html.escape(title)}</b>  "
            f"<i>{rarity}%</i>\n"
            f"‚Äî {_html.escape(desc)}  ¬∑  <span class='tg-spoiler'>{when}</span>"
        )
    await m.reply("\n".join(lines), disable_web_page_preview=True)

@dp.message(Command("achievements_top"))
async def cmd_achievements_top(m: Message):
    rows = db_query(
        "SELECT ua.user_id, COUNT(*) as cnt "
        "FROM user_achievements ua "
        "GROUP BY ua.user_id "
        "ORDER BY cnt DESC, MIN(ua.earned_at) ASC "
        "LIMIT 10;"
    )
    if not rows:
        await m.reply("–¢–æ–ø –ø—É—Å—Ç. –ü–æ—Ä–∞ —É–∂–µ –∫–æ–º—É-—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—É—é –∞—á–∏–≤–∫—É.")
        return
    ids = tuple(r[0] for r in rows)
    placeholders = ",".join(["?"] * len(ids)) if ids else ""
    users = {}
    if ids:
        urows = db_query(f"SELECT user_id, display_name, username FROM users WHERE user_id IN ({placeholders});", ids)
        for uid, dn, un in urows:
            users[uid] = (dn, un)
    def tg_mention(uid: int, dn: str|None, un: str|None) -> str:
        name = (dn or un or "–≥–æ—Å—Ç—å").strip()
        return f"<a href=\"tg://user?id={uid}\">{_html.escape(name)}</a>"
    out = ["<b>üèÜ –¢–û–ü –ø–æ –∞—á–∏–≤–∫–∞–º</b>\n"]
    rank = 1
    for uid, cnt in rows:
        dn, un = users.get(uid, (None, None))
        out.append(f"{rank}. {tg_mention(uid, dn, un)} ‚Äî <b>{cnt}</b> {('üèÖ'*min(cnt,5))}")
        rank += 1
    await m.reply("\n".join(out), disable_web_page_preview=True)

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
@dp.message(Command("ach_debug"))
async def cmd_ach_debug(m: Message):
    if not m.from_user:
        return
    uid = m.from_user.id
    full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
    db_execute(
        "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
        (uid, full_name, m.from_user.username)
    )
    row = db_query("SELECT value FROM user_counters WHERE user_id=? AND key=?;", (uid, "cmd:/q"))
    q_cnt = int(row[0][0]) if row else 0
    has_q10 = bool(db_query("SELECT 1 FROM user_achievements WHERE user_id=? AND code='Q10' LIMIT 1;", (uid,)))
    await m.reply(
        f"üîç Debug:\n"
        f"‚Ä¢ cmd:/q = <b>{q_cnt}</b>\n"
        f"‚Ä¢ Q10 –≤—ã–¥–∞–Ω–∞: <b>{'–¥–∞' if has_q10 else '–Ω–µ—Ç'}</b>\n"
        f"(–ü–æ—Ä–æ–≥ Q10: 10 —Ä–∞–∑ /q)",
        disable_web_page_preview=True
    )

# –ê–ª–∏–∞—Å—ã –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏: /achievments, /achievments_top
@dp.message(Command("achievments"))
async def _alias_achievments(m: Message):
    await cmd_achievements(m)

@dp.message(Command("achievments_top"))
async def _alias_achievments_top(m: Message):
    await cmd_achievements_top(m)


@dp.message(F.text & ~F.text.startswith("/"))
async def on_text(m: Message):
    # –¥–∞–ª–µ–µ ‚Äî —Ç–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ on_text –±–µ–∑ –ø–µ—Ä–≤—ã—Ö —Ç—Ä—ë—Ö —Å—Ç—Ä–æ–∫-–ø—Ä–æ–≤–µ—Ä–æ–∫
    if not m.text:
        return

    # –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    if not m.text.startswith("/"):
        db_execute(
            "INSERT INTO messages(chat_id, user_id, username, text, created_at, message_id) VALUES (?, ?, ?, ?, ?, ?);",
            (m.chat.id, m.from_user.id if m.from_user else 0,
             m.from_user.username if m.from_user else None,
             m.text, now_ts(), m.message_id)
        )
        # ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö –∏–º—ë–Ω –∏ –º–µ—Ç—Ä–∏–∫)
        if m.from_user:
            full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
            db_execute(
                "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
                "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
                (m.from_user.id, full_name, m.from_user.username)
            )
            # –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –±—É–¥—É—â–∏—Ö –∞—á–∏–≤–æ–∫ —Ç–∏–ø–∞ MSG100)
            inc_counter(m.from_user.id, "msg:total", 1)
            # –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∞—á–∏–≤–∫–∏, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è, –∑–∞–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞ msg:total
            # await check_achievements_for_user(m.from_user.id, m, updated_keys=["msg:total"])

    me = await bot.get_me()

    if m.text.startswith("/"):
        return

    if m.reply_to_message and m.reply_to_message.from_user and m.reply_to_message.from_user.id == me.id:
        await reply_to_thread(m)
        return

    if mentions_bot(m.text or "", me.username):
        await reply_to_mention(m)
        return

    await maybe_interject(m)


# =========================
# –¢—Ä–µ–∫–∏–Ω–≥ /q ‚Üí —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª
# =========================
@dp.message(Command("q"))
async def track_q_and_maybe_award(m: Message):
    if not m.from_user:
        return
    uid = m.from_user.id
    # –ø–æ–¥–¥–µ—Ä–∂–∏–º users-–∫–∞—Ä—Ç–æ—á–∫—É (–¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏/–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏)
    full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
    db_execute(
        "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
        (uid, full_name, m.from_user.username)
    )
    inc_counter(uid, "cmd:/q", 1)
    await check_achievements_for_user(uid, m, updated_keys=["cmd:/q"])

# =========================
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–∂–æ—á–∫–µ –î–∞—à–∏
# =========================
def _message_link(chat, message_id: int) -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ.
    –†–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤ (username) –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø (-100... -> /c/).
    –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø –±–µ–∑ username —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.
    """
    if getattr(chat, "username", None):
        return f"https://t.me/{chat.username}/{message_id}"
    cid = str(chat.id)
    if cid.startswith("-100"):  # –ø—Ä–∏–≤–∞—Ç–Ω–∞—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
        return f"https://t.me/c/{cid[4:]}/{message_id}"
    return None

@dp.message(F.video_note)
async def on_video_note_watch(m: Message):
    """
    –ï—Å–ª–∏ @daria_mango (WATCH_USER_ID) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫,
    –±–æ—Ç:
      1) –í –ì–†–£–ü–ü–ï/–°–£–ü–ï–†–ì–†–£–ü–ü–ï —Ç–µ–≥–∞–µ—Ç @misukhanov –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
      2) (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –õ–° ‚Äî —Å–µ–π—á–∞—Å –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    """
    user = m.from_user
    if not user or user.id != WATCH_USER_ID:
        return

    who_html = tg_mention(user.id, user.full_name or user.first_name, user.username)
    notify_html = tg_mention(NOTIFY_USER_ID, f"@{NOTIFY_USERNAME}", NOTIFY_USERNAME)

    link = _message_link(m.chat, m.message_id)
    link_html = f" <a href=\"{link}\">—Å—Å—ã–ª–∫–∞</a>" if link else ""

    if m.chat.type in ("group", "supergroup"):
        try:
            await m.reply(
                f"{notify_html}, {who_html} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫.{link_html}",
                disable_web_page_preview=True
            )
        except Exception:
            await m.reply(f"@{NOTIFY_USERNAME}, –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –æ—Ç @{user.username or user.id}")

# =========================
# Commands list
# =========================
async def set_commands():
    commands_group = [
        BotCommand(command="lord_summary", description="–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –±–µ—Å–µ–¥–µ"),
        BotCommand(command="lord_psych",  description="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
        BotCommand(command="achievements", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞—á–∏–≤–∫–∏"),
        BotCommand(command="achievements_top", description="–¢–æ–ø –ø–æ –∞—á–∏–≤–∫–∞–º"),
    ]
    commands_private = [
        BotCommand(command="lord_summary", description="–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –±–µ—Å–µ–¥–µ"),
        BotCommand(command="lord_psych",  description="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
        BotCommand(command="start", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand(command="achievements", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞—á–∏–≤–∫–∏"),
        BotCommand(command="achievements_top", description="–¢–æ–ø –ø–æ –∞—á–∏–≤–∫–∞–º"),
        BotCommand(command="ach_debug", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞—á–∏–≤–∫–∞–º (debug)"),
    ]
    await bot.set_my_commands(commands_group, scope=BotCommandScopeAllGroupChats())
    await bot.set_my_commands(commands_private, scope=BotCommandScopeAllPrivateChats())

# =========================
# Main
# =========================
async def main():
    init_db()
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
