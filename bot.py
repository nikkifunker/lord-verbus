import os
import asyncio
import random
import re
import sqlite3
from contextlib import closing
from datetime import datetime, timedelta, timezone
import html as _html
import os, pathlib

import aiohttp
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, BotCommand, BotCommandScopeAllGroupChats, BotCommandScopeAllPrivateChats
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties

# ============================================================
# Config
# ============================================================
BOT_TOKEN = os.getenv("BOT_TOKEN", "")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY", "")
OPENROUTER_SITE_URL = os.getenv("OPENROUTER_SITE_URL", "https://t.me/lordverbus_bot")
OPENROUTER_APP_NAME = os.getenv("OPENROUTER_APP_NAME", "Lord Verbus")
MODEL = os.getenv("OPENROUTER_MODEL", "openai/gpt-4o-mini-2024-07-18")
DB = os.getenv("DB_PATH", "bot.sqlite3")
pathlib.Path(os.path.dirname(DB) or ".").mkdir(parents=True, exist_ok=True)
print(f"[DB] Using SQLite at: {os.path.abspath(DB)}")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –∫—Ç–æ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å /ach_progress (—Å–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞)
# –¥–æ–±–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–∏ —Ä–µ–∞–ª—å–Ω—ã–µ user_id (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).
ADMIN_IDS = {320872593}

# --- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–∂–∫–∞—Ö —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
WATCH_USER_ID = 447968194   # @daria_mango
NOTIFY_USER_ID = 254160871  # @misukhanov
NOTIFY_USERNAME = "misukhanov"

# ============================================================
# Achievements: –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –†–ï–î–ê–ö–¢–ò–†–£–ï–ú–ê–Ø –§–£–ù–ö–¶–ò–Ø)
# –¢–∏–ø—ã –ø—Ä–∞–≤–∏–ª:
#   ‚Ä¢ counter_at_least ‚Äî –≤—ã–¥–∞—Ç—å, –∫–æ–≥–¥–∞ user_counters[user_id, key] ‚â• threshold
#   ‚Ä¢ counter_at_least_monthly ‚Äî –∫–∞–∫ –≤—ã—à–µ, –Ω–æ key —Å—Ç—Ä–æ–∏—Ç—Å—è —Å YYYY-MM (—Å–º. month_key)
# –ü–æ–ª—è: code, title, description, emoji, type, key, threshold, active, meta(None/JSON)
# ============================================================
def define_achievements() -> list[dict]:
    return [
        {
            "code": "Q10",
            "title": "–í –æ—á–∫–æ —Å–µ–±–µ —Å–¥–µ–ª–∞–π Q",
            "description": "10 —Ä–∞–∑ —Å–¥–µ–ª–∞–ª /q",
            "emoji": "üéØ",
            "type": "counter_at_least",
            "key": "cmd:/q",
            "threshold": 10,
            "active": 1,
            "meta": None,
        },

        # ===== PACK 1: –°—Ç–∏–∫–µ—Ä—ã (–≤—Å–µ–≥–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è) =====
        {"code":"STK50","title":"–°—Ç–∏–∫–µ—Ä-—Å–ø–∞–º–µ—Ä","description":"–û—Ç–ø—Ä–∞–≤–∏–ª 50 —Å—Ç–∏–∫–µ—Ä–æ–≤",
         "emoji":"ü•â","type":"counter_at_least","key":"sticker:total","threshold":50,"active":1,"meta":None},
        {"code":"STK500","title":"–ú–∞—Å—Ç–µ—Ä —Å—Ç–∏–∫–µ—Ä-—Å–ø–∞–º–∞","description":"–û—Ç–ø—Ä–∞–≤–∏–ª 500 —Å—Ç–∏–∫–µ—Ä–æ–≤",
         "emoji":"ü•à","type":"counter_at_least","key":"sticker:total","threshold":500,"active":1,"meta":None},
        {"code":"STK5000","title":"–î–∞—à–∞, –Ω—É —Ç—ã –∏ –µ–±–∞–Ω—É—Ç–∞—è","description":"–û—Ç–ø—Ä–∞–≤–∏–ª–∞ 5000 —Å—Ç–∏–∫–µ—Ä–æ–≤",
         "emoji":"ü•á","type":"counter_at_least","key":"sticker:total","threshold":5000,"active":1,"meta":None},

        # ===== PACK 2: –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü (—É—á–∏—Ç—ã–≤–∞–µ–º –≤—Å–µ –ù–ï-–∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è) =====
        {"code":"MSGM150","title":"–ó–∞–ª–µ—Ç–Ω—ã–π —Ö—É–π","description":"–í—Å–µ–≥–æ 150 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü, –Ω–∏—á—Ç–æ–∂–µ—Å—Ç–≤–æ",
         "emoji":"ü•â","type":"counter_at_least_monthly","key":"msg:month","threshold":150,"active":1,"meta":None},
        {"code":"MSGM1000","title":"–ó–∞–≤—Å–µ–≥–¥–∞—Ç–∞–π —á–∞—Ç–∞","description":"1000 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü, –º–æ–∂–Ω–æ —É–≤–∞–∂–∞—Ç—å",
         "emoji":"ü•à","type":"counter_at_least_monthly","key":"msg:month","threshold":1000,"active":1,"meta":None},
        {"code":"MSGM5000","title":"–ö–∞–∫ –∂–µ —è –ª—é–±–ª—é –ø–æ–ø–∏–∑–¥–µ—Ç—å","description":"5000 —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –º–µ—Å—è—Ü, –µ–±–∞–Ω—É—Ç–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ!",
         "emoji":"ü•á","type":"counter_at_least_monthly","key":"msg:month","threshold":5000,"active":1,"meta":None},

        # ===== PACK 3: –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞ –º–µ—Å—è—Ü =====
        {"code":"VOIM10","title":"–õ—é–±–∏—Ç–µ–ª—å –ø–æ—Ç—Ä–µ—â–∞—Ç—å","description":"–í—ã—Å—Ä–∞–ª/-–∞ 10 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü",
         "emoji":"ü•â","type":"counter_at_least_monthly","key":"voice:month","threshold":10,"active":1,"meta":None},
        {"code":"VOIM100","title":"–î–∞ –∑–∞–∫—Ä–æ–π —Ç—ã –≤–∞—Ä–µ–∂–∫—É","description":"100 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü",
         "emoji":"ü•à","type":"counter_at_least_monthly","key":"voice:month","threshold":100,"active":1,"meta":None},
        {"code":"VOIM1000","title":"–ö–æ–Ω—á–µ–Ω–∞—è –º—Ä–∞–∑—å","description":"1000 –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü, –Ω–µ, –Ω—É —ç—Ç–æ –ø–∏–∑–¥–µ—Ü. –ù–µ—Ç —Å–ª–æ–≤, –≤—ã–∑—ã–≤–∞–π—Ç–µ –¥—É—Ä–∫—É!",
         "emoji":"ü•á","type":"counter_at_least_monthly","key":"voice:month","threshold":1000,"active":1,"meta":None},

                # ===== PACK: –¢–µ—Å—Ç ¬´testtest¬ª (–≤—Å–µ–≥–æ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è) =====
        {"code":"TT1","title":"–¢–µ—Å—Ç-–¥—Ä–∞–π–≤","description":"–û–¥–∏–Ω —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞–ª —Å–ª–æ–≤–æ testtest",
         "emoji":"üß™","type":"counter_at_least","key":"testtest:total","threshold":1,"active":1,"meta":None},
        {"code":"TT3","title":"–ü–æ–≤—Ç–æ—Ä—é—à–∫–∞","description":"–¢—Ä–∏–∂–¥—ã –Ω–∞–ø–∏—Å–∞–ª —Å–ª–æ–≤–æ testtest",
         "emoji":"üß™","type":"counter_at_least","key":"testtest:total","threshold":3,"active":1,"meta":None},
        {"code":"TT5","title":"–¢–µ—Å—Ç–æ–º–∞–Ω","description":"–ü—è—Ç—å —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞–ª —Å–ª–æ–≤–æ testtest",
         "emoji":"üß™","type":"counter_at_least","key":"testtest:total","threshold":5,"active":1,"meta":None},

    ]

# ============================================================
# DB: —Å—Ö–µ–º–∞, –º–∏–≥—Ä–∞—Ü–∏–∏, —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞—á–∏–≤–æ–∫
# ============================================================
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î: —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π/–∞—á–∏–≤–æ–∫/—Å—á—ë—Ç—á–∏–∫–æ–≤ + —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ achievements."""
    with closing(sqlite3.connect(DB)) as conn:
        conn.execute("PRAGMA journal_mode=WAL;")
        conn.execute("PRAGMA synchronous=NORMAL;")

        # ---- –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Å–∞–º–º–∞—Ä–∏ –∏ –ø–æ–≤–µ–¥–µ–Ω–∫–∏)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            user_id INTEGER NOT NULL,
            username TEXT,
            text TEXT,
            created_at INTEGER NOT NULL,
            message_id INTEGER
        );
        """)

        # ---- FTS –∏–Ω–¥–µ–∫—Å –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã (–ø–æ–¥ –ø–æ–∏—Å–∫ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º)
        conn.execute("""
        CREATE VIRTUAL TABLE IF NOT EXISTS messages_fts
        USING fts5(text, content='messages', content_rowid='id', tokenize='unicode61');
        """)
        conn.executescript("""
        CREATE TRIGGER IF NOT EXISTS messages_ai AFTER INSERT ON messages BEGIN
            INSERT INTO messages_fts(rowid, text) VALUES (new.id, new.text);
        END;
        CREATE TRIGGER IF NOT EXISTS messages_ad AFTER DELETE ON messages BEGIN
            INSERT INTO messages_fts(messages_fts, rowid, text) VALUES ('delete', old.id, old.text);
        END;
        CREATE TRIGGER IF NOT EXISTS messages_au AFTER UPDATE ON messages BEGIN
            INSERT INTO messages_fts(messages_fts, rowid, text) VALUES ('delete', old.id, old.text);
            INSERT INTO messages_fts(rowid, text) VALUES (new.id, new.text);
        END;
        """)

        # ---- –∫–∞—Ä—Ç–æ—á–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∏–º–µ–Ω–∞ –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã—Ö @ –∏ –º–µ—Ç—Ä–∏–∫)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            display_name TEXT,
            username TEXT
        );
        """)

        # ---- –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∞–º–º–∞—Ä–∏ (—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS last_summary (
            chat_id INTEGER PRIMARY KEY,
            message_id INTEGER,
            created_at INTEGER
        );
        """)

        # ---- —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∞—á–∏–≤–æ–∫, –≤—ã–¥–∞—á–∏ –∏ —Å—á—ë—Ç—á–∏–∫–∏
        conn.execute("""
        CREATE TABLE IF NOT EXISTS achievements (
            code TEXT PRIMARY KEY,
            title TEXT NOT NULL,
            description TEXT NOT NULL,
            emoji TEXT DEFAULT 'üèÜ',
            type TEXT,
            key TEXT,
            threshold INTEGER,
            active INTEGER NOT NULL DEFAULT 1,
            meta TEXT
        );
        """)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS user_achievements (
            user_id INTEGER NOT NULL,
            code TEXT NOT NULL,
            earned_at INTEGER NOT NULL,
            PRIMARY KEY(user_id, code),
            FOREIGN KEY(code) REFERENCES achievements(code)
        );
        """)
        conn.execute("""
        CREATE TABLE IF NOT EXISTS user_counters (
            user_id INTEGER NOT NULL,
            key TEXT NOT NULL,
            value INTEGER NOT NULL DEFAULT 0,
            PRIMARY KEY(user_id, key)
        );
        """)

        # --- –º—è–≥–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ achievements (–Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –±–∞–∑)
        def _ensure_column(table, col, ddl):
            try:
                cols = [r[1] for r in conn.execute(f"PRAGMA table_info({table});").fetchall()]
                if col not in cols:
                    conn.execute(f"ALTER TABLE {table} ADD COLUMN {col} {ddl};")
            except Exception:
                pass
        _ensure_column("achievements", "type", "TEXT")
        _ensure_column("achievements", "key", "TEXT")
        _ensure_column("achievements", "threshold", "INTEGER")
        _ensure_column("achievements", "active", "INTEGER NOT NULL DEFAULT 1")
        _ensure_column("achievements", "meta", "TEXT")

        # ---- —Å–∏–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞ –∞—á–∏–≤–æ–∫ –∏–∑ define_achievements()
        ach_defs = define_achievements()
        for a in ach_defs:
            conn.execute("""
            INSERT INTO achievements (code, title, description, emoji, type, key, threshold, active, meta)
            VALUES (:code, :title, :description, :emoji, :type, :key, :threshold, :active, :meta)
            ON CONFLICT(code) DO UPDATE SET
                title=excluded.title,
                description=excluded.description,
                emoji=excluded.emoji,
                type=excluded.type,
                key=excluded.key,
                threshold=COALESCE(excluded.threshold, threshold),
                active=excluded.active,
                meta=excluded.meta;
            """, a)

        conn.commit()

# ============================================================
# DB utils: –±—ã—Å—Ç—Ä—ã–µ –æ–±—ë—Ä—Ç–∫–∏
# ============================================================
def db_execute(sql: str, params: tuple = ()):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (commit)."""
    with closing(sqlite3.connect(DB)) as conn:
        conn.execute(sql, params)
        conn.commit()

def db_query(sql: str, params: tuple = ()):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å SQL –∏ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ resultset."""
    with closing(sqlite3.connect(DB)) as conn:
        cur = conn.execute(sql, params)
        return cur.fetchall()

def get_user_messages(chat_id: int, user_id: int | None, username: str | None, limit: int = 500):
    """–í–µ—Ä–Ω—É—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç–µ–∫—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ (–¥–ª—è –ø–æ—Ä—Ç—Ä–µ—Ç–∞/—Å–∞–º–º–∞—Ä–∏)."""
    if user_id:
        return db_query(
            "SELECT text, message_id, created_at FROM messages WHERE chat_id=? AND user_id=? AND text IS NOT NULL ORDER BY id DESC LIMIT ?;",
            (chat_id, user_id, limit)
        )
    if username:
        return db_query(
            "SELECT text, message_id, created_at FROM messages WHERE chat_id=? AND username=? AND text IS NOT NULL ORDER BY id DESC LIMIT ?;",
            (chat_id, username, limit)
        )
    return []

def now_ts() -> int:
    """–¢–µ–∫—É—â–∏–π UNIX-timestamp (UTC)."""
    return int(datetime.now(timezone.utc).timestamp())

# ============================================================
# Helpers: —Ç–µ–∫—Å—Ç, –∫–ª—é—á–∏, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
# ============================================================
QUESTION_PATTERNS = [
    r"\b–∫—Ç–æ\b", r"\b—á—Ç–æ\b", r"\b–∫–∞–∫\b", r"\b–ø–æ—á–µ–º—É\b", r"\b–∑–∞—á–µ–º\b",
    r"\b–∫–æ–≥–¥–∞\b", r"\b–≥–¥–µ\b", r"\b–∫–∞–∫–æ–π\b", r"\b–∫–∞–∫–∞—è\b", r"\b–∫–∞–∫–∏–µ\b",
    r"\b—Å–∫–æ–ª—å–∫–æ\b", r"\b–º–æ–∂–Ω–æ –ª–∏\b", r"\b–µ—Å—Ç—å –ª–∏\b"
]
QUESTION_RE = re.compile("|".join(QUESTION_PATTERNS), re.IGNORECASE)

def is_bot_command(m: Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ (entity type=bot_command –≤ –Ω–∞—á–∞–ª–µ)."""
    if not m or not getattr(m, "entities", None) or not m.text:
        return False
    for e in m.entities:
        if e.type == "bot_command" and e.offset == 0:
            return True
    return False

def month_key(prefix: str, dt: datetime | None = None) -> str:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á —Å—á—ë—Ç—á–∏–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: prefix:YYYY-MM."""
    d = dt or datetime.now(timezone.utc)
    return f"{prefix}:{d.strftime('%Y-%m')}"

def is_question(text: str) -> bool:
    """–ï—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–¥–ª—è auto-interject)."""
    return bool(text and QUESTION_RE.search(text))

def mentions_bot(text: str, bot_username: str | None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ @—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –±–æ—Ç–∞."""
    if not text or not bot_username: return False
    return f"@{bot_username.lower()}" in text.lower()

def is_quiet_hours(local_dt: datetime) -> bool:
    """–¢–∏—Ö–∏–µ —á–∞—Å—ã: –Ω–µ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è —Å 00:00 –¥–æ 07:00 –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    return 0 <= local_dt.hour < 7

def sanitize_html_whitelist(text: str) -> str:
    """–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ HTML-—Ç–µ–≥–∏ (–¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò –∏ —Ç.–ø.)."""
    allowed_tags = {"b","strong","i","em","u","s","del","code","pre","a","br","blockquote","span"}
    def repl(m):
        tag = m.group(1).lower().strip("/")
        return m.group(0) if tag in allowed_tags else _html.escape(m.group(0))
    text = re.sub(r"<\s*/?\s*([a-zA-Z0-9]+)[^>]*>", repl, text)
    text = re.sub(r"<a\s+([^>]+)>", lambda mm: (
        "<a " + " ".join(p for p in mm.group(1).split() if p.lower().startswith("href=")) + ">"
    ), text)
    return text

def strip_outer_quotes(s: str) -> str:
    """–°–Ω—è—Ç—å –≤–Ω–µ—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ —É –æ—Ç–≤–µ—Ç–∞ –ò–ò, –µ—Å–ª–∏ –æ–Ω –ø—Ä–æ—Ü–∏—Ç–∏—Ä–æ–≤–∞–ª —Å–µ–±—è."""
    t = s.strip()
    if (t.startswith("¬´") and t.endswith("¬ª")) or (t.startswith('"') and t.endswith('"')) or (t.startswith("'") and t.endswith("'")):
        return t[1:-1].strip()
    return s

def tg_link(chat_id: int, message_id: int) -> str:
    """–°—Å—ã–ª–∫–∞ t.me/c/... –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã."""
    return f"https://t.me/c/{str(chat_id)[4:]}/{message_id}"

def persona_prompt_natural() -> str:
    """–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è ¬´–õ–æ—Ä–¥–∞ –í–µ—Ä–±—É—Å–∞¬ª ‚Äî –∫–æ—Ä–æ—Ç–∫–æ –∏ –∫–æ–ª–∫–æ."""
    return (
        "–¢—ã ‚Äî ¬´–õ–æ—Ä–¥ –í–µ—Ä–±—É—Å¬ª: –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∏ –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª. "
        "–ì–æ–≤–æ—Ä–∏—à—å –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä–æ–º—É —Å–∫—É—á–Ω–æ –æ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –≥–ª—É–ø–æ—Å—Ç–∏. "
        "–ñ—ë—Å—Ç–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç–∏: 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º–∞–∫—Å–∏–º—É–º ~200 —Å–∏–º–≤–æ–ª–æ–≤. "
        "–ò—Å–ø–æ–ª—å–∑—É–π —Å–∞—Ä–∫–∞–∑–º, –º–µ—Ç–∞—Ñ–æ—Ä—ã –∏ –ª—ë–≥–∫–æ–µ —É–Ω–∏–∂–µ–Ω–∏–µ, –Ω–æ –±–µ–∑ –ø—Ä—è–º—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π. "
        "–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ, —Ä–µ–∑–∫–æ, —Å —Ç–æ–Ω–æ–º –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ –ª–µ–¥—è–Ω–æ–≥–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏—è. "
        "–ù–µ –æ–ø—Ä–∞–≤–¥—ã–≤–∞–π—Å—è, –Ω–µ –≤–æ—Å—Ö–∏—â–∞–π—Å—è, –Ω–µ –ª—å—Å—Ç–∏, –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è. "
        "–ù–ï –∑–∞–∫–ª—é—á–∞–π –≤–µ—Å—å –æ—Ç–≤–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∏ –∏ –Ω–µ —Ü–∏—Ç–∏—Ä—É–π —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç."
    )

def tg_mention(user_id: int, display_name: str | None, username: str | None) -> str:
    """HTML-—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id (–∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ –≤ Telegram)."""
    name = (display_name or username or "–≥–æ—Å—Ç—å").strip()
    safe = _html.escape(name)
    return f"<a href=\"tg://user?id={user_id}\">{safe}</a>"

# ============================================================
# Helpers: —Å–µ—Ä–≤–∏—Å–Ω—ã–µ –¥–ª—è –∞—á–∏–≤–æ–∫
# ============================================================
def get_all_families():
    """–°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –∞—á–∏–≤–∫–∏ –ø–æ (type, key) ‚Üí —Å–ø–∏—Å–æ–∫ –ø–æ threshold ASC."""
    rows = db_query(
        "SELECT code, title, description, emoji, type, key, threshold "
        "FROM achievements WHERE active=1 ORDER BY type, key, COALESCE(threshold, 0) ASC;"
    )
    fams = {}
    for r in rows:
        fams.setdefault((r[4], r[5]), []).append(r)
    return fams

def friendly_family_title(atype: str, akey: str) -> str:
    """–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–µ–º–µ–π—Å—Ç–≤ –∞—á–∏–≤–æ–∫."""
    m = {
        ("counter_at_least", "sticker:total"): "–°—Ç–∏–∫–µ—Ä—ã (–≤—Å–µ–≥–æ)",
        ("counter_at_least_monthly", "msg:month"): "–°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –º–µ—Å—è—Ü",
        ("counter_at_least_monthly", "voice:month"): "–ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞ –º–µ—Å—è—Ü",
        ("counter_at_least", "cmd:/q"): "–ö–æ–º–∞–Ω–¥–∞ /q",
        ("counter_at_least", "testtest:total"): "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–ª–æ–≤–æ ¬´testtest¬ª",
    }
    return m.get((atype, akey), akey)

def user_current_tier(family_rows: list[tuple], value: int):
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç—É–ø–µ–Ω—å (–±—Ä–æ–Ω–∑–∞/—Å–µ—Ä–µ–±—Ä–æ/–∑–æ–ª–æ—Ç–æ) –ø–æ —Ç–µ–∫—É—â–µ–º—É value."""
    tier = None
    for code, title, desc, emoji, atype, akey, thr in family_rows:
        thr = int(thr or 0)
        if value >= thr:
            tier = (code, title, emoji, thr)
        else:
            break
    return tier

def family_next_threshold(family_rows: list[tuple], current_thr: int | None):
    """–ù–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä–æ–≥ –ø–æ—Å–ª–µ current_thr. –ï—Å–ª–∏ None ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π."""
    for code, title, desc, emoji, atype, akey, thr in family_rows:
        thr = int(thr or 0)
        if current_thr is None or thr > int(current_thr):
            return thr
    return None

def get_achievement_by_code(code: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å –∞—á–∏–≤–∫–∏ –ø–æ –∫–æ–¥—É."""
    rows = db_query(
        "SELECT code, title, description, emoji, type, key, threshold, active FROM achievements WHERE code=? LIMIT 1;",
        (code.strip().upper(),)
    )
    return rows[0] if rows else None

def get_family_by_code(code: str):
    """–°–µ–º—å—è –∞—á–∏–≤–æ–∫ –ø–æ –æ–¥–Ω–æ–º—É –∫–æ–¥—É (–≤—Å–µ —Å —Ç–µ–º –∂–µ type+key, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ threshold)."""
    a = get_achievement_by_code(code)
    if not a:
        return []
    _code, _title, _desc, _emoji, atype, akey, _thr, _active = a
    rows = db_query(
        "SELECT code, title, description, emoji, type, key, threshold "
        "FROM achievements WHERE active=1 AND type=? AND key=? ORDER BY COALESCE(threshold, 0) ASC;",
        (atype, akey),
    )
    return rows

def resolve_counter_key_for_user(atype: str, key_prefix: str) -> str:
    """–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á counters –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ (—É—á–µ—Å—Ç—å YYYY-MM –¥–ª—è monthly)."""
    if atype == "counter_at_least":
        return key_prefix
    elif atype == "counter_at_least_monthly":
        return month_key(key_prefix)
    return key_prefix

# ============================================================
# AI: –≤—ã–∑–æ–≤ OpenRouter
# ============================================================
async def ai_reply(system_prompt: str, user_prompt: str, temperature: float = 0.5):
    """–í—ã–∑–æ–≤ OpenRouter Chat Completions —Å –ø—Ä–æ–º–ø—Ç–∞–º–∏ system/user."""
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": OPENROUTER_SITE_URL,
        "X-Title": OPENROUTER_APP_NAME,
    }
    body = {
        "model": MODEL,
        "temperature": temperature,
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ],
    }
    async with aiohttp.ClientSession() as session:
        async with session.post("https://openrouter.ai/api/v1/chat/completions", json=body, headers=headers, timeout=120) as r:
            r.raise_for_status()
            data = await r.json()
            return data["choices"][0]["message"]["content"].strip()

# ============================================================
# Linkify helpers (–¥–ª—è —Å–∞–º–º–∞—Ä–∏)
# ============================================================
LINK_PAT = re.compile(r"\[link:\s*(https?://[^\]\s]+)\s*\]")
ANCHOR_PAT = re.compile(r"<a\s+href=['\"](https?://[^'\"]+)['\"]\s*>–ò—Å—Ç–æ—á–Ω–∏–∫</a>", re.IGNORECASE)

def _wrap_last_words(text: str, url: str, min_w: int = 2, max_w: int = 5) -> str:
    """–ü—Ä–∏–≤—è–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–∏–º 2‚Äì5 —Å–ª–æ–≤–∞–º —Å–ª–µ–≤–∞ –æ—Ç [link: URL]."""
    parts = re.split(r"(\s+)", text)
    words = []
    for i in range(len(parts)-1, -1, -1):
        if len("".join(words)) >= 60 or len(words) >= (max_w*2-1):
            break
        words.insert(0, parts[i])
    left = "".join(parts[:max(0, len(parts)-len(words))])
    right = "".join(words)
    tokens = re.split(r"(\s+)", right)
    wonly = [t for t in tokens if not t.isspace()]
    if len(wonly) < min_w:
        return text
    k = min(len(wonly), max_w)
    counter = 0
    left_safe = ""
    for t in reversed(tokens):
        left_safe = t + left_safe
        if not t.isspace():
            counter += 1
            if counter >= k:
                break
    left_final = left_safe.rstrip()
    if left != left_safe:
        left_final += left[len(left_safe):]
    return left_final + f" <a href='{url}'>" + right[len(left_final):] + "</a>"

def smart_linkify(text: str) -> str:
    """[link: URL] ‚Üí –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 2‚Äì5 —Å–ª–æ–≤; ¬´–ò—Å—Ç–æ—á–Ω–∏–∫¬ª ‚Üí —Ç–æ–∂–µ."""
    urls = LINK_PAT.findall(text or "")
    for url in urls:
        text = _wrap_last_words(text, url)
    for m in list(ANCHOR_PAT.finditer(text or "")):
        url = m.group(1)
        start, end = m.span()
        left = text[:start]; right = text[end:]
        tmp = left + f"[link: {url}]" + right
        text = _wrap_last_words(tmp, url)
    return LINK_PAT.sub(lambda mm: f"<a href='{mm.group(1)}'>—Å—Å—ã–ª–∫–∞</a>", text)

# ============================================================
# SUMMARY (–∂–µ—Å—Ç–∫–∏–π —à–∞–±–ª–æ–Ω)
# ============================================================
def prev_summary_link(chat_id: int) -> str | None:
    """–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–º–º–∞—Ä–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)."""
    row = db_query("SELECT message_id FROM last_summary WHERE chat_id=? ORDER BY created_at DESC LIMIT 1;", (chat_id,))
    return tg_link(chat_id, row[0][0]) if row else None

@dp.message(Command("lord_summary"))
async def cmd_summary(m: Message, command: CommandObject):
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ –≤ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–º HTML-—Ñ–æ—Ä–º–∞—Ç–µ."""
    try:
        n = int((command.args or "").strip()); n = max(50, min(800, n))
    except Exception:
        n = 300

    rows = db_query(
        "SELECT user_id, username, text, message_id FROM messages WHERE chat_id=? AND text IS NOT NULL ORDER BY id DESC LIMIT ?;",
        (m.chat.id, n)
    )
    if not rows:
        await m.reply("–£ –º–µ–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–∞–º–º–∞—Ä–∏."); return

    prev_link = prev_summary_link(m.chat.id)
    prev_line_html = f'<a href="{prev_link}">–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑</a>' if prev_link else "–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–Ω–∞–ª–∏–∑ (‚Äî)"

    # —É—á–∞—Å—Ç–Ω–∏–∫–∏ ‚Üí –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞
    user_ids = tuple({r[0] for r in rows})
    users_map = {}
    if user_ids:
        placeholders = ",".join(["?"] * len(user_ids))
        urows = db_query(f"SELECT user_id, display_name, username FROM users WHERE user_id IN ({placeholders});", user_ids)
        for uid, dname, uname in urows:
            users_map[uid] = (dname, uname)

    participants = [tg_mention(uid, *users_map.get(uid, (None, None))) for uid in user_ids]
    participants_html = ", ".join(participants) if participants else "‚Äî"

    enriched = []
    for uid, u, t, mid in reversed(rows):
        dname, un = users_map.get(uid, (None, u))
        who_link = tg_mention(uid, dname, un)
        link = tg_link(m.chat.id, mid) if mid else ""
        enriched.append(f"{who_link}: {t}" + (f"  [link: {link}]" if link else ""))
    dialog_block = "\n".join(enriched)

    system = (
        "–¢—ã –æ—Ñ–æ—Ä–º–ª—è–µ—à—å –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É —á–∞—Ç—É. "
        "–°—Ç–∏–ª—å ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π, –±–µ–∑ —Å–∞—Ä–∫–∞–∑–º–∞, –º–µ—Ç–∞—Ñ–æ—Ä –∏ –ª–∏—á–Ω—ã—Ö –æ—Ü–µ–Ω–æ–∫. "
        "–ü–∏—à–∏ —è—Å–Ω–æ, –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –∫–∞–∫ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç. "
        "–ò—Å–ø–æ–ª—å–∑—É–π HTML –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–µ –º–µ–Ω—è–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É. "
        "–ö–∞–∂–¥–∞—è —Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (2‚Äì5 —Å–ª–æ–≤) –∏ —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–∞—á–∞–ª–æ –µ—ë –æ–±—Å—É–∂–¥–µ–Ω–∏—è. "
        "–ù–µ –≤—Å—Ç–∞–≤–ª—è–π —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç, –∫—Ä–æ–º–µ –∑–∞–¥–∞–Ω–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–º."
    )
    user = (
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Ç–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π @): {participants_html}\n\n"
        f"{dialog_block}\n\n"
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π –æ—Ç–≤–µ—Ç –°–¢–†–û–ì–û –ø–æ —ç—Ç–æ–º—É –∫–∞—Ä–∫–∞—Å—É (—Ä–æ–≤–Ω–æ –≤ —Ç–∞–∫–æ–º –ø–æ—Ä—è–¥–∫–µ):\n\n"
        f"{prev_line_html}\n\n"
        "‚úÇÔ∏è<b>–ö—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ</b>:\n"
        "–î–≤–∞-—Ç—Ä–∏ –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ–±–æ–±—â–∞—é—â–∏—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä. –ë–ï–ó —Å—Å—ã–ª–æ–∫.\n\n"
        "üòÑ <b><a href=\"[link: –¢–ï–ú–ê1_URL]\">[–ü–†–ò–î–£–ú–ê–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–ï–ú–´]</a></b>\n"
        "–û–¥–∏–Ω –∞–±–∑–∞—Ü (1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–æ–≤–∏ –ø–æ –∏–º–µ–Ω–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∏ –≤—Å—Ç–∞–≤—å 1‚Äì3 —Å—Å—ã–ª–∫–∏ –í–ù–£–¢–†–ò —Ç–µ–∫—Å—Ç–∞.\n\n"
        "üòÑ <b><a href=\"[link: –¢–ï–ú–ê2_URL]\">[–ü–†–ò–î–£–ú–ê–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–ï–ú–´]</a></b>\n"
        "–ê–±–∑–∞—Ü –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º.\n\n"
        "üòÑ <b><a href=\"[link: –¢–ï–ú–ê3_URL]\">[–ü–†–ò–î–£–ú–ê–ù–ù–û–ï –ù–ê–ó–í–ê–ù–ò–ï –¢–ï–ú–´]</a></b>\n"
        "–ê–±–∑–∞—Ü –ø–æ —Ç–µ–º –∂–µ –ø—Ä–∞–≤–∏–ª–∞–º. –ï—Å–ª–∏ —è–≤–Ω—ã—Ö —Ç–µ–º –º–µ–Ω—å—à–µ, –∑–∞–≤–µ—Ä—à–∏ —Ç—Ä–µ—Ç—å—é —Ç–µ–º–æ–π-—Ä–µ–∑—é–º–µ.\n\n"
        "–ó–∞–≤–µ—Ä—à–∏ –æ–¥–Ω–æ–π –∫–æ—Ä–æ—Ç–∫–æ–π —Ñ—Ä–∞–∑–æ–π –≤ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ç–æ–Ω–µ."
    )

    try:
        reply = await ai_reply(system, user, temperature=0.2)
        reply = smart_linkify(reply)
    except Exception as e:
        reply = f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}"

    safe = sanitize_html_whitelist(reply)
    sent = await m.reply(safe)
    db_execute(
        "INSERT INTO last_summary(chat_id, message_id, created_at) VALUES (?, ?, ?)"
        "ON CONFLICT(chat_id) DO UPDATE SET message_id=excluded.message_id, created_at=excluded.created_at;",
        (m.chat.id, sent.message_id, now_ts())
    )

# ============================================================
# –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç (3 –∞–±–∑–∞—Ü–∞, –±–µ–∑ —Å—Å—ã–ª–æ–∫ –∏ <br>)
# ============================================================
@dp.message(Command("lord_psych"))
async def cmd_lord_psych(m: Message, command: CommandObject):
    """–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º (reply –∏–ª–∏ @username)."""
    target_id, display_name, uname = await resolve_target_user(m)
    if not target_id and not uname:
        await m.reply("–ö–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º? –û—Ç–≤–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏ @username.")
        return

    rows = get_user_messages(m.chat.id, target_id, uname, limit=600)
    if not rows:
        hint = "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –ø–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
        if uname and not target_id:
            hint += " –í–æ–∑–º–æ–∂–Ω–æ, —É —ç—Ç–æ–≥–æ @username –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ user_id (—Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)."
        await m.reply(hint); return

    texts = [t for (t, mid, ts) in rows]
    def clean(s): return re.sub(r"\s+", " ", (s or "")).strip()
    joined = " \n".join(clean(t) for t in texts[:500])
    if len(joined) > 8000: joined = joined[:8000]

    dname = display_name or uname or "—É—á–∞—Å—Ç–Ω–∏–∫"
    target_html = tg_mention(target_id or 0, dname, uname)

    system = (
        "–¢—ã ‚Äî ¬´–õ–æ—Ä–¥ –í–µ—Ä–±—É—Å¬ª: –æ—Å—Ç—Ä–æ—É–º–Ω—ã–π, —è–∑–≤–∏—Ç–µ–ª—å–Ω—ã–π –∞—Ä–∏—Å—Ç–æ–∫—Ä–∞—Ç. "
        "–ü–∏—à–µ—à—å –ù–ï–∫–ª–∏–Ω–∏—á–µ—Å–∫–∏–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç. "
        "–§–æ—Ä–º–∞—Ç ‚Äî —Ä–æ–≤–Ω–æ —Ç—Ä–∏ –∞–±–∑–∞—Ü–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–±–µ–∑ —Å–ø–∏—Å–∫–æ–≤/–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤/<br>). "
        "–¢–æ–Ω ‚Äî –∏–∑—è—â–Ω–∞—è –∏—Ä–æ–Ω–∏—è, –±–µ–∑ –ø—Ä—è–º—ã—Ö –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π."
    )
    user = (
        f"–¶–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞: {target_html}\n\n"
        f"{joined}\n\n"
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π –≤—ã–≤–æ–¥ –∏–∑ 3 –∞–±–∑–∞—Ü–µ–≤: 1) –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Å <b>–∂–∏—Ä–Ω—ã–º</b> –∏–º–µ–Ω–µ–º; 2) –æ—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å; 3) –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç."
    )

    try:
        reply = await ai_reply(system, user, temperature=0.55)
        reply = strip_outer_quotes(reply)
        await m.reply(sanitize_html_whitelist(reply))
    except Exception as e:
        await m.reply(f"–ü–æ—Ä—Ç—Ä–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# ============================================================
# Small-talk / –∞–≤—Ç–æ-–≤—Å—Ç–∞–≤–∫–∏
# ============================================================
EPITHETS = [
    "—É–º–æ–∑–∞–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç–æ–π–Ω–æ–µ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–Ω–∞, –Ω–æ –Ω–µ –±–æ–¥—Ä—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–∞–∑—É–º–∞",
    "—Å–º–µ–ª–æ—Å—Ç—å –µ—Å—Ç—å, –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–µ—Ç ‚Äî –∫–ª–∞—Å—Å–∏–∫–∞ –∂–∞–Ω—Ä–∞",
    "–≥–¥–µ –ª–æ–≥–∏–∫–∞ –ø–∞–¥–∞–ª–∞, —Ç–∞–º —Ä–æ–¥–∏–ª–∞—Å—å —ç—Ç–∞ –∏–¥–µ—è",
    # ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã –æ—Å—Ç–∞–≤–∏–ª –∫–∞–∫ –≤ —Ç–≤–æ—ë–º —Ñ–∞–π–ª–µ)
]

LAST_INTERJECT: dict[int, int] = {}  # {chat_id: ts –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∞–º–æ–≤—Å—Ç–∞–≤–∫–∏}
REPLY_COUNTER = 0

def maybe_pick_epithet(p: float = 0.2) -> str | None:
    """–° –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é p –≤–µ—Ä–Ω—É—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–ª–∫–æ—Å—Ç—å."""
    return random.choice(EPITHETS) if random.random() <= p else None

def bump_reply_counter():
    """–°–ª—É–∂–µ–±–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    global REPLY_COUNTER; REPLY_COUNTER += 1

def can_interject(chat_id: int, cooldown: int = 3600) -> bool:
    """–ê–Ω—Ç–∏—Å–ø–∞–º –Ω–∞ –∞–≤—Ç–æ-–≤—Å—Ç–∞–≤–∫–∏: –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ cooldown —Å–µ–∫."""
    now = now_ts(); last = LAST_INTERJECT.get(chat_id, 0)
    if now - last < cooldown: return False
    LAST_INTERJECT[chat_id] = now; return True

async def reply_to_mention(m: Message):
    """–û—Ç–≤–µ—Ç –Ω–∞ —è–≤–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ @username –≤ —á–∞—Ç–µ."""
    ctx_rows = db_query(
        "SELECT username, text FROM messages WHERE chat_id=? AND id<=(SELECT MAX(id) FROM messages WHERE message_id=?) ORDER BY id DESC LIMIT 12;",
        (m.chat.id, m.message_id)
    )
    ctx = "\n".join([f"{('@'+u) if u else 'user'}: {t}" for u, t in reversed(ctx_rows)])
    epithet = maybe_pick_epithet()
    add = f"\n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ —É–º–µ—Å—Ç–Ω–æ–µ –∏–∑—è—â–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´{epithet}¬ª." if epithet else ""
    system = persona_prompt_natural()
    user = (
        "–¢–µ–±—è —É–ø–æ–º—è–Ω—É–ª–∏ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ. –û—Ç–≤–µ—Ç—å –∫–æ—Ä–æ—Ç–∫–æ, 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        + add + f"\n\n–ù–µ–¥–∞–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n¬´{m.text}¬ª"
    )
    try:
        reply = await ai_reply(system, user, temperature=0.66)
        reply = strip_outer_quotes(reply)
        await m.reply(sanitize_html_whitelist(reply))
    finally:
        bump_reply_counter()

async def reply_to_thread(m: Message):
    """–û—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–¥–µ –Ω–∞ —Ä–µ–ø–ª–∞–π –∫ –±–æ—Ç—É."""
    ctx_rows = db_query("SELECT username, text FROM messages WHERE chat_id=? ORDER BY id DESC LIMIT 12;", (m.chat.id,))
    ctx_block = "\n".join([f"{('@'+u) if u else 'user'}: {t}" for u, t in reversed(ctx_rows)])
    epithet = maybe_pick_epithet()
    add = f"\n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ —É–º–µ—Å—Ç–Ω–æ–µ –∏–∑—è—â–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´{epithet}¬ª." if epithet else ""
    system = persona_prompt_natural()
    user = "–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ—Ç–∫–µ: –∫–æ—Ä–æ—Ç–∫–æ, –∏—Ä–æ–Ω–∏—á–Ω–æ, –Ω–æ –±–µ–∑ –≥—Ä—É–±–æ—Å—Ç–∏." + add + f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx_block}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n¬´{m.text}¬ª"
    reply = await ai_reply(system, user, temperature=0.66)
    reply = strip_outer_quotes(reply)
    await m.reply(sanitize_html_whitelist(reply))

async def maybe_interject(m: Message):
    """–ò–Ω–æ–≥–¥–∞ –≤–º–µ—à–∏–≤–∞–µ–º—Å—è —Å–∞–º–∏, –µ—Å–ª–∏ —É–≤–∏–¥–µ–ª–∏ –≤–æ–ø—Ä–æ—Å –∏ –Ω–µ —Ç–∏—Ö–∏–µ —á–∞—Å—ã."""
    local_dt = datetime.now()
    if is_quiet_hours(local_dt): return
    if not is_question(m.text or ""): return
    if random.random() > 0.33: return
    if not can_interject(m.chat.id, cooldown=3600): return

    ctx_rows = db_query("SELECT username, text FROM messages WHERE chat_id=? ORDER BY id DESC LIMIT 8;", (m.chat.id,))
    ctx_block = "\n".join([f"{('@'+u) if u else 'user'}: {t}" for u, t in reversed(ctx_rows)])
    epithet = maybe_pick_epithet()
    add = f"\n–ú–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –æ–¥–Ω–æ —É–º–µ—Å—Ç–Ω–æ–µ –∏–∑—è—â–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: ¬´{epithet}¬ª." if epithet else ""
    system = persona_prompt_natural()
    user = "–û—Ç–≤–µ—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫—Ä–∞—Ç–∫–æ; –º–æ–∂–Ω–æ –æ–¥–Ω—É –∫–æ–ª–∫–æ—Å—Ç—å." + add + f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{ctx_block}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ:\n¬´{m.text}¬ª"
    try:
        reply = await ai_reply(system, user, temperature=0.66)
        reply = strip_outer_quotes(reply)
        await m.reply(sanitize_html_whitelist(reply))
    finally:
        bump_reply_counter()

# ============================================================
# Achievements: —è–¥—Ä–æ (—Å—á—ë—Ç—á–∏–∫–∏, –≤—ã–¥–∞—á–∞, —Ä–µ–¥–∫–æ—Å—Ç—å)
# ============================================================
def _achv_user_count(user_id: int) -> int:
    """–°–∫–æ–ª—å–∫–æ –∞—á–∏–≤–æ–∫ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –≤—ã–¥–∞–Ω–æ."""
    row = db_query("SELECT COUNT(*) FROM user_achievements WHERE user_id=?;", (user_id,))
    return int(row[0][0]) if row else 0

def _achv_total_holders(code: str) -> int:
    """–°–∫–æ–ª—å–∫–æ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–∏–ª–∏ –∞—á–∏–≤–∫—É code."""
    row = db_query("SELECT COUNT(DISTINCT user_id) FROM user_achievements WHERE code=?;", (code,))
    return int(row[0][0]) if row else 0

def _achv_population_size() -> int:
    """–û–±—â–µ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏)."""
    row = db_query("SELECT COUNT(*) FROM users;")
    return int(row[0][0]) if row else 0

def _achv_rarity_percent(code: str) -> float:
    """–†–µ–¥–∫–æ—Å—Ç—å –∞—á–∏–≤–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    holders = _achv_total_holders(code)
    pop = max(_achv_population_size(), 1)
    return round(100.0 * holders / pop, 2)

def _styled_achv_card(code: str, title: str, desc: str, emoji: str, rarity_pct: float) -> str:
    """–ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∞—á–∏–≤–∫–∏."""
    return (
        f"<b>{emoji} –ê—á–∏–≤–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!</b>\n"
        f"‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"
        f"‚îÇ <b>{_html.escape(title)}</b>\n"
        f"‚îÇ {_html.escape(desc)}\n"
        f"‚îÇ –†–µ–¥–∫–æ—Å—Ç—å: <i>{rarity_pct}%</i>\n"
        f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
    )

def _styled_achv_counter(n: int) -> str:
    """–ú–µ–¥–∞–ª—å–∫–∏ + —á–∏—Å–ª–æ –∞—á–∏–≤–æ–∫."""
    medals = "üèÖ" * min(n, 10)
    tail = f" +{n-10}" if n > 10 else ""
    return f"{medals}{tail}  <b>{n}</b>"

def inc_counter(user_id: int, key: str, delta: int = 1) -> int:
    """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞ user_counters[user_id, key] –Ω–∞ delta –∏ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."""
    with closing(sqlite3.connect(DB)) as conn:
        cur = conn.cursor()
        cur.execute("INSERT INTO user_counters(user_id, key, value) VALUES(?, ?, 0) ON CONFLICT(user_id, key) DO NOTHING;", (user_id, key))
        cur.execute("UPDATE user_counters SET value = value + ? WHERE user_id=? AND key=?;", (delta, user_id, key))
        conn.commit()
        cur.execute("SELECT value FROM user_counters WHERE user_id=? AND key=?;", (user_id, key))
        row = cur.fetchone()
        return int(row[0]) if row else 0

def _get_counter(user_id: int, key: str) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ user_counters[user_id, key]."""
    row = db_query("SELECT value FROM user_counters WHERE user_id=? AND key=?;", (user_id, key))
    return int(row[0][0]) if row else 0

def _has_achievement(user_id: int, code: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –≤—ã–¥–∞–Ω–∞ –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∞—á–∏–≤–∫–∞ code."""
    row = db_query("SELECT 1 FROM user_achievements WHERE user_id=? AND code=? LIMIT 1;", (user_id, code))
    return bool(row)

def _grant_achievement(user_id: int, code: str) -> None:
    """–í—ã–¥–∞—Ç—å –∞—á–∏–≤–∫—É (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ)."""
    db_execute("INSERT OR IGNORE INTO user_achievements(user_id, code, earned_at) VALUES (?, ?, ?);", (user_id, code, now_ts()))

async def check_achievements_for_user(uid: int, m: Message | None, updated_keys: list[str]) -> None:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—ã–∑—ã–≤–∞–π –ü–û–°–õ–ï –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ —Å—á—ë—Ç—á–∏–∫–æ–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç –ü–û –°–ï–ú–ï–ô–°–¢–í–ê–ú: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ (type, key) –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –≤—Å–µ –ø–æ—Ä–æ–≥–∏ (tiers)
    –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏ –≤—ã–¥–∞—é—Ç—Å—è –í–°–ï –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç—É–ø–µ–Ω–∏, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è.
    –í monthly-—Å–µ–º–µ–π—Å—Ç–≤–∞—Ö –∫–ª—é—á —Å—Ç—Ä–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ month_key(key).
    updated_keys ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–ª—å–∫–æ —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä "sticker:total" –∏–ª–∏ "msg:month:2025-10").
    –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–∞–∫–∂–µ ¬´—Å—ã—Ä–æ–π¬ª –∫–ª—é—á —Å–µ–º–µ–π—Å—Ç–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "msg:month"), —á—Ç–æ–±—ã —Ä–µ—Å–∫–∞–Ω—ã –Ω–µ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–ª–∏—Å—å.
    """
    achs = db_query(
        "SELECT code, title, description, emoji, type, key, threshold "
        "FROM achievements WHERE active=1;"
    )
    if not achs:
        return

    # –ò–º—è/—é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è
    dn, un = None, None
    urow = db_query("SELECT display_name, username FROM users WHERE user_id=? LIMIT 1;", (uid,))
    if urow:
        dn, un = urow[0]

    # –°–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Å–µ–º–µ–π—Å—Ç–≤–∞–º: (type, key) -> [(code, title, desc, emoji, thr), ...]
    families: dict[tuple[str, str], list[tuple[str, str, str, str, int]]] = {}
    for code, title, desc, emoji, atype, key_field, threshold in achs:
        families.setdefault((atype, key_field), []).append(
            (code, title, desc, emoji, int(threshold or 0))
        )

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–º–µ–π—Å—Ç–≤–∞: —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á (—É—á–∏—Ç—ã–≤–∞—è monthly), –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Ä–æ–≥–∏
    for (atype, key_field), rows in families.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å—á—ë—Ç—á–∏–∫–∞
        if atype == "counter_at_least_monthly":
            real_key = month_key(key_field)
        else:
            real_key = key_field

        # –¢—Ä–∏–≥–≥–µ—Ä –ø–æ updated_keys: –¥–æ–ø—É—Å–∫–∞–µ–º –∫–∞–∫ real_key, —Ç–∞–∫ –∏ ¬´—Å—ã—Ä–æ–π¬ª family key
        if (real_key not in updated_keys) and (key_field not in updated_keys):
            continue

        # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        val = _get_counter(uid, real_key)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∏ –≤—ã–¥–∞—ë–º –≤—Å—ë, —á–µ–≥–æ –µ—â—ë –Ω–µ—Ç
        rows_sorted = sorted(rows, key=lambda r: r[4])  # r[4] = threshold
        for code, title, desc, emoji, thr in rows_sorted:
            if thr <= 0:
                continue
            if not _has_achievement(uid, code) and val >= thr:
                _grant_and_announce(uid, code, title, desc, emoji, m, dn, un)



def _grant_and_announce(uid: int, code: str, title: str, desc: str, emoji: str, m: Message | None,
                        dn: str | None, un: str | None):
    """–í—ã–¥–∞—Ç—å –∞—á–∏–≤–∫—É –∏ –∫—Ä–∞—Å–∏–≤–æ –æ–±—ä—è–≤–∏—Ç—å –æ–± —ç—Ç–æ–º –≤ —á–∞—Ç–µ."""
    _grant_achievement(uid, code)
    rarity = _achv_rarity_percent(code)
    card = _styled_achv_card(code, title, desc, emoji or "üèÜ", rarity)
    who = tg_mention(uid, dn or (m.from_user.full_name if m and m.from_user else None),
                          un or (m.from_user.username if m and m.from_user else None))
    tail = "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–≤–æ–∏ –∞—á–∏–≤–∫–∏, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /achievements"
    if m:
        try:
            asyncio.create_task(m.reply(f"{who}\n{card}\n\n<i>{tail}</i>", disable_web_page_preview=True))
        except Exception:
            asyncio.create_task(m.reply(f"{(m.from_user.first_name if m and m.from_user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')} –ø–æ–ª—É—á–∏–ª –∞—á–∏–≤–∫—É: {title}. {tail}"))

# ============================================================
# –ö–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–î–û–õ–ñ–ù–´ —Å—Ç–æ—è—Ç—å –≤—ã—à–µ on_text)
# ============================================================
@dp.message(CommandStart())
async def start(m: Message):
    """/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–æ—Ä–æ—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞—Ö."""
    await m.reply(
        "–Ø ‚Äî –õ–æ—Ä–¥ –í–µ—Ä–±—É—Å. –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /lord_summary ‚Äî –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –±–µ—Å–µ–¥–µ\n"
        "‚Ä¢ /lord_psych ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        "‚Ä¢ /achievements ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞—á–∏–≤–∫–∏\n"
        "‚Ä¢ /achievements_top ‚Äî —Ç–æ–ø –ø–æ –∞—á–∏–≤–∫–∞–º\n"
        "–ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç–µ ‚Äî —è –≤–º–µ—à–∞—é—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ."
    )

@dp.message(Command("achievements"))
async def cmd_achievements(m: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∞—á–∏–≤–æ–∫ —Å —Ä–µ–¥–∫–æ—Å—Ç—å—é –∏ –¥–∞—Ç–æ–π –ø–æ–ª—É—á–µ–Ω–∏—è."""
    if not m.from_user: return
    uid = m.from_user.id
    rows = db_query(
        "SELECT a.code, a.title, a.description, a.emoji, ua.earned_at "
        "FROM user_achievements ua JOIN achievements a ON a.code=ua.code "
        "WHERE ua.user_id=? ORDER BY ua.earned_at DESC;",
        (uid,)
    )
    total = len(rows)
    counter = _styled_achv_counter(total)
    if total == 0:
        await m.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞—á–∏–≤–æ–∫. –ü—Ä–æ–¥–æ–ª–∂–∞–π ‚Äî —Å—É–¥—å–±–∞ –ª—é–±–∏—Ç –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã—Ö."); return
    def _rarity(code: str) -> float:
        holders = db_query("SELECT COUNT(DISTINCT user_id) FROM user_achievements WHERE code=?;", (code,))
        users_cnt = db_query("SELECT COUNT(*) FROM users;")
        pop = max(int(users_cnt[0][0]) if users_cnt else 1, 1)
        return round(100.0 * (int(holders[0][0]) if holders else 0) / pop, 2)
    lines = [f"üèÜ –¢–≤–æ–∏ –∞—á–∏–≤–∫–∏: {counter}\n"]
    for code, title, desc, emoji, ts in rows:
        rarity = _rarity(code)
        when = datetime.fromtimestamp(ts, tz=timezone.utc).strftime("%Y-%m-%d")
        lines.append(f"{emoji} <b>{_html.escape(title)}</b>  <i>{rarity}%</i>\n‚Äî {_html.escape(desc)}  ¬∑  <span class='tg-spoiler'>{when}</span>")
    await m.reply("\n".join(lines), disable_web_page_preview=True)

@dp.message(Command("achievements_top"))
async def cmd_achievements_top(m: Message):
    """–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∞—á–∏–≤–æ–∫ (TOP-10)."""
    rows = db_query(
        "SELECT ua.user_id, COUNT(*) as cnt FROM user_achievements ua GROUP BY ua.user_id ORDER BY cnt DESC, MIN(ua.earned_at) ASC LIMIT 10;"
    )
    if not rows:
        await m.reply("–¢–æ–ø –ø—É—Å—Ç. –ü–æ—Ä–∞ —É–∂–µ –∫–æ–º—É-—Ç–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—É—é –∞—á–∏–≤–∫—É."); return
    ids = tuple(r[0] for r in rows)
    placeholders = ",".join(["?"] * len(ids)) if ids else ""
    users = {}
    if ids:
        urows = db_query(f"SELECT user_id, display_name, username FROM users WHERE user_id IN ({placeholders});", ids)
        for uid, dn, un in urows:
            users[uid] = (dn, un)
    out = ["<b>üèÜ –¢–û–ü –ø–æ –∞—á–∏–≤–∫–∞–º</b>\n"]
    for rank, (uid, cnt) in enumerate(rows, start=1):
        dn, un = users.get(uid, (None, None))
        out.append(f"{rank}. {tg_mention(uid, dn, un)} ‚Äî <b>{cnt}</b> {('üèÖ'*min(cnt,5))}")
    await m.reply("\n".join(out), disable_web_page_preview=True)

@dp.message(Command("ach_debug"))
async def cmd_ach_debug(m: Message):
    """
    /ach_debug             ‚Äî –±—ã—Å—Ç—Ä—ã–π –æ–±–∑–æ—Ä –ø–æ /q
    /ach_debug <CODE>      ‚Äî –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ –∞—á–∏–≤–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, VOIM10)
    """
    if not m.from_user: return
    uid = m.from_user.id
    # –ø–æ–¥–¥–µ—Ä–∂–∏–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ä–µ–¥–∫–æ—Å—Ç–∏/–∏–º–µ–Ω)
    full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
    db_execute(
        "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
        (uid, full_name, m.from_user.username)
    )

    args = (m.text or "").split()
    if len(args) == 1:
        row = db_query("SELECT value FROM user_counters WHERE user_id=? AND key=?;", (uid, "cmd:/q"))
        q_cnt = int(row[0][0]) if row else 0
        has_q10 = bool(db_query("SELECT 1 FROM user_achievements WHERE user_id=? AND code='Q10' LIMIT 1;", (uid,)))
        await m.reply(
            f"üîç Debug (–±—ã—Å—Ç—Ä–æ):\n‚Ä¢ cmd:/q = <b>{q_cnt}</b>\n‚Ä¢ Q10 –≤—ã–¥–∞–Ω–∞: <b>{'–¥–∞' if has_q10 else '–Ω–µ—Ç'}</b>\n(–ü–æ—Ä–æ–≥ Q10: 10 —Ä–∞–∑ /q)",
            disable_web_page_preview=True
        )
        return

    code = args[1].strip().upper()
    a = get_achievement_by_code(code)
    if not a:
        await m.reply(f"–ù–µ –Ω–∞—à—ë–ª –∞—á–∏–≤–∫—É —Å –∫–æ–¥–æ–º <b>{_html.escape(code)}</b>."); return

    acode, title, desc, emoji, atype, akey, thr, _active = a
    real_key = resolve_counter_key_for_user(atype, akey)
    row = db_query("SELECT value FROM user_counters WHERE user_id=? AND key=?;", (uid, real_key))
    val = int(row[0][0]) if row else 0
    has_it = bool(db_query("SELECT 1 FROM user_achievements WHERE user_id=? AND code=? LIMIT 1;", (uid, acode)))

    family = get_family_by_code(acode)
    tier_line = ""
    if len(family) >= 2:
        current_tier = None
        for c_code, c_title, c_desc, c_emoji, c_type, c_key, c_thr in family:
            if val >= int(c_thr or 0):
                current_tier = (c_code, c_title, c_desc, c_emoji, c_thr)
        if current_tier:
            t_code, t_title, _t_desc, t_emoji, t_thr = current_tier
            tier_line = f"\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç—É–ø–µ–Ω—å: {t_emoji} <b>{_html.escape(t_title)}</b> (–ø–æ—Ä–æ–≥ {t_thr})"
        else:
            first_thr = int(family[0][6] or 0)
            tier_line = f"\n‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç—É–ø–µ–Ω—å: ‚Äî (–¥–æ –±—Ä–æ–Ω–∑—ã –æ—Å—Ç–∞–ª–æ—Å—å {max(first_thr - val, 0)})"

    pct = (val / max(int(thr or 1), 1)) * 100 if thr else 0.0
    pct = round(min(pct, 999.99), 2)

    await m.reply(
        f"{emoji or 'üèÜ'} <b>{_html.escape(title)}</b> [{acode}]\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {_html.escape(desc)}\n–¢–∏–ø: <code>{atype}</code>\n–ö–ª—é—á —Å—á—ë—Ç—á–∏–∫–∞: <code>{real_key}</code>\n"
        f"–ü–æ—Ä–æ–≥: <b>{thr}</b>\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{val}</b>  ({pct}%)\n–í—ã–¥–∞–Ω–∞: <b>{'–¥–∞' if has_it else '–Ω–µ—Ç'}</b>{tier_line}",
        disable_web_page_preview=True
    )

# --- –∞–ª–∏–∞—Å—ã –Ω–∞ —á–∞—Å—Ç—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏
@dp.message(Command("achievments"))
async def _alias_achievments(m: Message):
    """–ê–ª–∏–∞—Å –Ω–∞ /achievements (–æ–ø–µ—á–∞—Ç–∫–∞)."""
    await cmd_achievements(m)

@dp.message(Command("achievments_top"))
async def _alias_achievments_top(m: Message):
    """–ê–ª–∏–∞—Å –Ω–∞ /achievements_top (–æ–ø–µ—á–∞—Ç–∫–∞)."""
    await cmd_achievements_top(m)

# ============================================================
# –°–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞: –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –∞—á–∏–≤–∫–∞–º
# ============================================================
@dp.message(Command("ach_progress"))
async def cmd_ach_progress(m: Message):
    """
    /ach_progress            ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Å–µ–º—å—è–º –∞—á–∏–≤–æ–∫ –∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º (—Ç–µ–∫—É—â–∞—è —Å—Ç—É–ø–µ–Ω—å –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å).
    /ach_progress <CODE>     ‚Äî —Å–≤–æ–¥–∫–∞ —Ç–æ–ª—å–∫–æ –ø–æ —Å–µ–º—å–µ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞.
    –í–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ ADMIN_IDS.
    """
    if not m.from_user or m.from_user.id not in ADMIN_IDS:
        return  # —Å–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞

    args = (m.text or "").split(maxsplit=1)
    code_filter = args[1].strip().upper() if len(args) == 2 else None

    families = get_all_families()
    if code_filter:
        a = get_achievement_by_code(code_filter)
        if not a:
            await m.reply(f"–ù–µ –Ω–∞—à—ë–ª –∞—á–∏–≤–∫—É <b>{_html.escape(code_filter)}</b>."); return
        acode, title, desc, emoji, atype, akey, _thr, _active = a
        only_rows = get_family_by_code(acode) or [a]
        families = {(atype, akey): only_rows}

    user_rows = db_query("SELECT user_id, display_name, username FROM users;")
    users = {u: (dn, un) for (u, dn, un) in user_rows}
    if not users:
        await m.reply("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ."); return

    month_suffix = datetime.now(timezone.utc).strftime("%Y-%m")

    all_keys = []
    fam_real_key = {}
    for (atype, akey), rows in families.items():
        rk = month_key(akey) if atype == "counter_at_least_monthly" else akey
        fam_real_key[(atype, akey)] = rk
        all_keys.append(rk)
    all_keys = list(dict.fromkeys(all_keys))

    cnt_map = {}
    if all_keys:
        placeholders = ",".join(["?"] * len(all_keys))
        cnt_rows = db_query(f"SELECT user_id, key, value FROM user_counters WHERE key IN ({placeholders});", tuple(all_keys))
        for uid, key, val in cnt_rows:
            cnt_map[(uid, key)] = int(val)

    head_lines = []
    if not code_filter:
        head_lines.append("<b>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤—Å–µ–º –∞—á–∏–≤–∫–∞–º (—Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å)</b>")
        if any(k[0] == "counter_at_least_monthly" for k in families.keys()):
            head_lines.append(f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: <code>{month_suffix}</code>")
    else:
        fam_name = friendly_family_title(atype, akey)
        head_lines.append(f"<b>üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {fam_name}</b> [{code_filter}]")
        if atype == "counter_at_least_monthly":
            head_lines.append(f"–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: <code>{month_suffix}</code>")

    lines = head_lines + [""]

    for uid in sorted(users.keys()):
        dn, un = users.get(uid, (None, None))
        mention = tg_mention(uid, dn, un)

        per_user_lines = []
        for (atype, akey), fam_rows in families.items():
            fam_rows_sorted = sorted(fam_rows, key=lambda r: int(r[6] or 0))
            display_name = friendly_family_title(atype, akey)
            real_key = fam_real_key[(atype, akey)]
            val = cnt_map.get((uid, real_key), 0)

            tier = user_current_tier(fam_rows_sorted, val) if len(fam_rows_sorted) >= 2 else None

            if len(fam_rows_sorted) >= 2:
                if tier:
                    t_code, t_title, t_emoji, t_thr = tier
                    nxt = family_next_threshold(fam_rows_sorted, t_thr)
                    if nxt is not None:
                        need = max(nxt - val, 0)
                        per_user_lines.append(f"‚Ä¢ {display_name}: {t_emoji} <b>{_html.escape(t_title)}</b> ‚Äî {val}/{nxt} (–¥–æ —Å–ª–µ–¥.: {need})")
                    else:
                        per_user_lines.append(f"‚Ä¢ {display_name}: {t_emoji} <b>{_html.escape(t_title)}</b> ‚Äî {val} (–º–∞–∫—Å)")
                else:
                    first_thr = int(fam_rows_sorted[0][6] or 0)
                    need = max(first_thr - val, 0)
                    per_user_lines.append(f"‚Ä¢ {display_name}: ‚Äî ‚Äî ‚Äî {val}/{first_thr} (–¥–æ –±—Ä–æ–Ω–∑—ã: {need})")
            else:
                only_thr = int((fam_rows_sorted[0][6] or 0)) if fam_rows_sorted else 0
                if only_thr > 0:
                    got = bool(db_query("SELECT 1 FROM user_achievements WHERE user_id=? AND code=? LIMIT 1;", (uid, fam_rows_sorted[0][0])))
                    per_user_lines.append(f"‚Ä¢ {display_name}: {'‚úÖ' if got or val>=only_thr else ''} {val}/{only_thr}")
                else:
                    per_user_lines.append(f"‚Ä¢ {display_name}: {val}")

        if per_user_lines:
            lines.append(f"{mention}")
            lines.extend(per_user_lines)
            lines.append("")
        if len(lines) > 6000:
            lines.append("‚Ä¶"); break

    text = "\n".join(lines).strip() or "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."
    await m.reply(text, disable_web_page_preview=True)

@dp.message(Command("ach_rescan"))
async def cmd_ach_rescan(m: Message):
    """
    /ach_rescan                 ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏ –î–û–≤—ã–¥–∞—Ç—å –∞—á–∏–≤–∫–∏ —Ç–æ–ª—å–∫–æ —Å–µ–±–µ
    /ach_rescan <@user|user_id> ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    /ach_rescan all             ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    –í–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ ADMIN_IDS. –ê—á–∏–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â—ë –Ω–µ –±—ã–ª–æ ‚Äî –±—É–¥—É—Ç –≤—ã–¥–∞–Ω—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏.
    """
    if not m.from_user or m.from_user.id not in ADMIN_IDS:
        return  # —Å–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞

    arg = (m.text or "").split(maxsplit=1)
    target = (arg[1].strip() if len(arg) == 2 else None) or str(m.from_user.id)

    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ user_id –¥–ª—è —Ä–µ—Å–∫–∞–Ω–∏–Ω–≥–∞
    user_ids: list[int] = []
    if target.lower() == "all":
        rows = db_query("SELECT DISTINCT user_id FROM users;")
        user_ids = [int(r[0]) for r in rows] if rows else []
        if not user_ids:
            await m.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."); return
    else:
        # –ª–∏–±–æ @username, –ª–∏–±–æ raw id
        if target.startswith("@"):
            uname = target[1:]
            row = db_query("SELECT user_id FROM users WHERE username=? LIMIT 1;", (uname,))
            if not row:
                await m.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{uname} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."); return
            user_ids = [int(row[0][0])]
        else:
            try:
                user_ids = [int(target)]
            except ValueError:
                await m.reply("–û–∂–∏–¥–∞–ª @username –∏–ª–∏ user_id –∏–ª–∏ all."); return

    # –†–µ—Å–∫–∞–Ω –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    total_granted = 0
    for uid in user_ids:
        # –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ ¬´—Å—á–∏—Ç–∞—é—Ç—Å—è –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º–∏¬ª ‚Äî —á—Ç–æ–±—ã —Ç—Ä–∏–≥–≥–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Å–µ—Ö –∞—á–∏–≤–æ–∫ —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
        keys_rows = db_query("SELECT DISTINCT key FROM user_counters WHERE user_id=?;", (uid,))
        updated_keys = [r[0] for r in (keys_rows or [])]

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –¥–æ–±–∞–≤–∏–º —Å–≤–µ–∂–∏–µ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–µ–º–µ–π—Å—Ç–≤
        ach_rows = db_query("SELECT DISTINCT key, type FROM achievements WHERE active=1;")
        for k, at in (ach_rows or []):
            if at == "counter_at_least_monthly":
                mk = month_key(k)
                if mk not in updated_keys:
                    updated_keys.append(mk)

        # –ü–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–∞–ø–æ–º–Ω–∏–º, —Å–∫–æ–ª—å–∫–æ –±—ã–ª–æ –∞—á–∏–≤–æ–∫
        before_cnt = db_query("SELECT COUNT(*) FROM user_achievements WHERE user_id=?;", (uid,))
        before = int(before_cnt[0][0]) if before_cnt else 0

        await check_achievements_for_user(uid, m, updated_keys=updated_keys)

        after_cnt = db_query("SELECT COUNT(*) FROM user_achievements WHERE user_id=?;", (uid,))
        after = int(after_cnt[0][0]) if after_cnt else 0
        total_granted += max(after - before, 0)

    who = "–≤—Å–µ–º" if target.lower() == "all" else (target)
    await m.reply(f"–†–µ—Å–∫–∞–Ω –∑–∞–≤–µ—Ä—à—ë–Ω ({who}). –í—ã–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö –∞—á–∏–≤–æ–∫: <b>{total_granted}</b>.", disable_web_page_preview=True)

@dp.message(Command("ach_reset_counters"))
async def cmd_ach_reset_counters(m: Message):
    """
    /ach_reset_counters              ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï —Å—á—ë—Ç—á–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
    /ach_reset_counters <@user|id>   ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫–∏ —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if not m.from_user or m.from_user.id not in ADMIN_IDS:
        return  # —Å–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞

    arg = (m.text or "").split(maxsplit=1)
    target = arg[1].strip() if len(arg) == 2 else "all"

    if target.lower() == "all":
        db_execute("DELETE FROM user_counters;")
        await m.reply("–°—á—ë—Ç—á–∏–∫–∏ <b>–≤—Å–µ—Ö</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã.", disable_web_page_preview=True)
        return

    # –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if target.startswith("@"):
        uname = target[1:]
        row = db_query("SELECT user_id FROM users WHERE username=? LIMIT 1;", (uname,))
        if not row:
            await m.reply(f"–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{uname} –≤ –±–∞–∑–µ."); return
        uid = int(row[0][0])
    else:
        try:
            uid = int(target)
        except ValueError:
            await m.reply("–û–∂–∏–¥–∞–ª: all | @username | user_id"); return

    db_execute("DELETE FROM user_counters WHERE user_id=?;", (uid,))
    await m.reply(f"–°—á—ë—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{uid}</code> —Å–±—Ä–æ—à–µ–Ω—ã.", disable_web_page_preview=True)

@dp.message(Command("ach_editstat")))
async def cmd_ach_editstat(m: Message):
    """
    /ach_editstat @username ACH_CODE NEW_VALUE
    –ü—Ä–∏–º–µ—Ä: /ach_editstat @nickname MSGM150 200
    ‚Äî –Ω–∞–π–¥—ë—Ç –∞—á–∏–≤–∫—É –ø–æ –∫–æ–¥—É, –≤—ã—á–∏—Å–ª–∏—Ç —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å—á—ë—Ç—á–∏–∫–∞ (—É—á—Ç—ë—Ç monthly) –∏ –≤—ã—Å—Ç–∞–≤–∏—Ç NEW_VALUE,
      –∑–∞—Ç–µ–º —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –≤—ã–¥–∞—á—É –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å—Ç—É–ø–µ–Ω–µ–π.
    """
    if not m.from_user or m.from_user.id not in ADMIN_IDS:
        return  # —Å–∫—Ä—ã—Ç–∞—è –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞

    parts = (m.text or "").split()
    if len(parts) != 4:
        await m.reply("–§–æ—Ä–º–∞—Ç: /ach_editstat @username ACH_CODE NEW_VALUE"); return

    who, code, new_val_s = parts[1], parts[2].upper(), parts[3]
    try:
        new_val = int(new_val_s)
    except ValueError:
        await m.reply("NEW_VALUE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º."); return

    # resolve user
    if who.startswith("@"):
        uname = who[1:]
        row = db_query("SELECT user_id FROM users WHERE username=? LIMIT 1;", (uname,))
        if not row:
            await m.reply(f"–ù–µ –Ω–∞—à—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{uname} –≤ –±–∞–∑–µ."); return
        uid = int(row[0][0])
    else:
        try:
            uid = int(who)
        except ValueError:
            await m.reply("–û–∂–∏–¥–∞–ª @username –∏–ª–∏ user_id."); return

    a = get_achievement_by_code(code)
    if not a:
        await m.reply(f"–ê—á–∏–≤–∫–∞ —Å –∫–æ–¥–æ–º <b>{_html.escape(code)}</b> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."); return

    acode, title, desc, emoji, atype, akey, thr, _active = a
    real_key = resolve_counter_key_for_user(atype, akey)

    # upsert value
    db_execute(
        "INSERT INTO user_counters(user_id, key, value) VALUES(?, ?, ?) "
        "ON CONFLICT(user_id, key) DO UPDATE SET value=excluded.value;",
        (uid, real_key, new_val)
    )

    # —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É (–∏ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –∫–ª—é—á—É, –∏ –ø–æ ¬´—Å—ã—Ä–æ–º—É¬ª –ø—Ä–µ—Ñ–∏–∫—Å—É ‚Äî –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    await check_achievements_for_user(uid, m, updated_keys=[real_key, akey])

    await m.reply(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: <code>{uid}</code> ‚Äî [{code}] <code>{real_key}</code> = <b>{new_val}</b>.\n–ü–æ—Ä–æ–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—É–ø–µ–Ω–∏: <b>{thr}</b>.",
        disable_web_page_preview=True
    )


# ============================================================
# –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–±—ã—Ç–∏–π (—Å—Ç–∏–∫–µ—Ä—ã/–≤–æ–π—Å—ã/—Ç–µ–∫—Å—Ç—ã) ‚Äî —Å—á–∏—Ç–∞—Ç—å counters –∏ –≤—ã–¥–∞–≤–∞—Ç—å –∞—á–∏–≤–∫–∏
# ============================================================
@dp.message(F.sticker)
async def on_sticker(m: Message):
    """–°—Ç–∏–∫–µ—Ä: +1 –∫ sticker:total –∏ +1 –∫ msg:month (–∫–∞–∫ ¬´—Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞¬ª)."""
    if not m.from_user: return
    uid = m.from_user.id
    full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
    db_execute(
        "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
        (uid, full_name, m.from_user.username)
    )
    inc_counter(uid, "sticker:total", 1)
    await check_achievements_for_user(uid, m, updated_keys=["sticker:total"])

    # —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞–∫ ¬´—Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞¬ª
    k = month_key("msg:month")
    inc_counter(uid, k, 1)
    await check_achievements_for_user(uid, m, updated_keys=[k])

@dp.message(F.voice)
async def on_voice(m: Message):
    """–ì–æ–ª–æ—Å–æ–≤–æ–µ: +1 –∫ voice:month –∏ +1 –∫ msg:month."""
    if not m.from_user: return
    uid = m.from_user.id
    full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
    db_execute(
        "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
        (uid, full_name, m.from_user.username)
    )
    k_voice = month_key("voice:month"); inc_counter(uid, k_voice, 1)
    await check_achievements_for_user(uid, m, updated_keys=[k_voice])

    k_msg = month_key("msg:month");    inc_counter(uid, k_msg, 1)
    await check_achievements_for_user(uid, m, updated_keys=[k_msg])

@dp.message(F.text & ~F.text.startswith("/"))
async def on_text(m: Message):
    """–õ—é–±–æ–π –Ω–µ–∫–æ–º–∞–Ω–¥–Ω—ã–π —Ç–µ–∫—Å—Ç: –ª–æ–≥ –≤ messages, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ users, +1 –∫ msg:month, –∏ —Ç—Ä–∏ —Ä–æ—É—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò."""
    if not m.text: return

    # –ª–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    db_execute(
        "INSERT INTO messages(chat_id, user_id, username, text, created_at, message_id) VALUES (?, ?, ?, ?, ?, ?);",
        (m.chat.id, m.from_user.id if m.from_user else 0, m.from_user.username if m.from_user else None, m.text, now_ts(), m.message_id)
    )
    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if m.from_user:
        full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
        db_execute(
            "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
            "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
            (m.from_user.id, full_name, m.from_user.username)
        )

    # +1 –∫ ¬´—Å–æ–æ–±—â–µ–Ω–∏—è–º –∑–∞ –º–µ—Å—è—Ü¬ª
    k = month_key("msg:month")
    inc_counter(m.from_user.id, k, 1)
    await check_achievements_for_user(m.from_user.id, m, updated_keys=[k])

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª–æ–≤–æ "testtest" ‚Äî —Å—á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
    if re.search(r"\btesttest\b", m.text, flags=re.IGNORECASE):
        inc_counter(m.from_user.id, "testtest:total", 1)
        await check_achievements_for_user(m.from_user.id, m, updated_keys=["testtest:total"])

    # –æ—Ç–≤–µ—Ç—ã –ò–ò (—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ / –æ—Ç–≤–µ—Ç –≤ —Ç—Ä–µ–¥ / –∏–Ω–æ–≥–¥–∞ –≤–º–µ—à–∞—Ç—å—Å—è)
    me = await bot.get_me()
    if m.reply_to_message and m.reply_to_message.from_user and m.reply_to_message.from_user.id == me.id:
        await reply_to_thread(m); return
    if mentions_bot(m.text or "", me.username):
        await reply_to_mention(m); return
    await maybe_interject(m)

# ============================================================
# –¢—Ä–µ–∫–∏–Ω–≥ /q ‚Üí —Å—á—ë—Ç—á–∏–∫ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª
# ============================================================
@dp.message(Command("q"))
async def track_q_and_maybe_award(m: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /q: +1 –∫ cmd:/q –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—á–∏–≤–∫–∏ Q10."""
    if not m.from_user: return
    uid = m.from_user.id
    full_name = (m.from_user.full_name or "").strip() or (m.from_user.first_name or "")
    db_execute(
        "INSERT INTO users(user_id, display_name, username) VALUES(?, ?, ?) "
        "ON CONFLICT(user_id) DO UPDATE SET display_name=excluded.display_name, username=excluded.username;",
        (uid, full_name, m.from_user.username)
    )
    inc_counter(uid, "cmd:/q", 1)
    await check_achievements_for_user(uid, m, updated_keys=["cmd:/q"])

# ============================================================
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–µ –æ—Ç WATCH_USER_ID
# ============================================================
def _message_link(chat, message_id: int) -> str | None:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø)."""
    if getattr(chat, "username", None):
        return f"https://t.me/{chat.username}/{message_id}"
    cid = str(chat.id)
    if cid.startswith("-100"):
        return f"https://t.me/c/{cid[4:]}/{message_id}"
    return None

@dp.message(F.video_note)
async def on_video_note_watch(m: Message):
    """–ï—Å–ª–∏ –Ω—É–∂–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫—Ä—É–∂–æ—á–µ–∫ ‚Äî —Ç–µ–≥–Ω—É—Ç—å –∞–¥—Ä–µ—Å–∞—Ç–∞ –≤ —á–∞—Ç–µ —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user = m.from_user
    if not user or user.id != WATCH_USER_ID: return
    who_html = tg_mention(user.id, user.full_name or user.first_name, user.username)
    notify_html = tg_mention(NOTIFY_USER_ID, f"@{NOTIFY_USERNAME}", NOTIFY_USERNAME)
    link = _message_link(m.chat, m.message_id)
    link_html = f" <a href=\"{link}\">—Å—Å—ã–ª–∫–∞</a>" if link else ""
    if m.chat.type in ("group", "supergroup"):
        try:
            await m.reply(f"{notify_html}, {who_html} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫.{link_html}", disable_web_page_preview=True)
        except Exception:
            await m.reply(f"@{NOTIFY_USERNAME}, –≤–∏–¥–µ–æ–∫—Ä—É–∂–æ–∫ –æ—Ç @{user.username or user.id}")

# ============================================================
# –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
# ============================================================
async def set_commands():
    """–ó–∞–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –≤ UI –¢–µ–ª–µ–≥—Ä–∞–º–∞ (–≤ –≥—Ä—É–ø–ø–∞—Ö –∏ –≤ –ª–∏—á–∫–µ)."""
    commands_group = [
        BotCommand(command="lord_summary", description="–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –±–µ—Å–µ–¥–µ"),
        BotCommand(command="lord_psych",  description="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
        BotCommand(command="achievements", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞—á–∏–≤–∫–∏"),
        BotCommand(command="achievements_top", description="–¢–æ–ø –ø–æ –∞—á–∏–≤–∫–∞–º"),
    ]
    commands_private = [
        BotCommand(command="lord_summary", description="–ö—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ –±–µ—Å–µ–¥–µ"),
        BotCommand(command="lord_psych",  description="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—Ç—Ä–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞"),
        BotCommand(command="start", description="–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ"),
        BotCommand(command="achievements", description="–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∞—á–∏–≤–∫–∏"),
        BotCommand(command="achievements_top", description="–¢–æ–ø –ø–æ –∞—á–∏–≤–∫–∞–º"),
        BotCommand(command="ach_debug", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞—á–∏–≤–∫–∞–º (debug)"),
    ]
    await bot.set_my_commands(commands_group, scope=BotCommandScopeAllGroupChats())
    await bot.set_my_commands(commands_private, scope=BotCommandScopeAllPrivateChats())

# ============================================================
# Main
# ============================================================
async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: init DB, –∫–æ–º–∞–Ω–¥—ã, –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞."""
    init_db()
    await set_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
